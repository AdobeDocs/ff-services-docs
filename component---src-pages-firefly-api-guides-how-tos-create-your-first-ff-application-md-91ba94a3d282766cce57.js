"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[39],{91525:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return f}});var a=t(58168),o=t(80045),i=(t(88763),t(15680)),s=t(83407);const r=["components"],d={},l=e=>function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)},p=l("InlineAlert"),m=l("CodeBlock"),c={_frontmatter:d},u=s.A;function f(e){let{components:n}=e,t=(0,o.A)(e,r);return(0,i.mdx)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"create-your-first-firefly-api-implementation"},"Create your first Firefly API implementation"),(0,i.mdx)("p",null,"A step-by-step guide to creating your first implementation of the Firefly API."),(0,i.mdx)("p",null,"The Adobe Firefly API offers a seamless way to integrate powerful creative workflows into your applications using a simple REST-based API. In this tutorial, we'll guide you through creating your first implementation of the Firefly API."),(0,i.mdx)(p,{slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"This tutorial provides code snippets in both ",(0,i.mdx)("inlineCode",{parentName:"p"},"Node.js")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"Python")," for your convenience. Feel free to use the language of your choice to complete the implementation of your first Firefly API."),(0,i.mdx)("p",null,"Let's get started!"),(0,i.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.mdx)("p",null,"Before we begin, make sure you have the following:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Firefly API credentials. If you don't have them yet, first visit the Firefly Services ",(0,i.mdx)("a",{parentName:"li",href:"../../../guides/get-started.md"},"Getting Started")," guide to obtain a ",(0,i.mdx)("inlineCode",{parentName:"li"},"client_id")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"client_secret"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"Node.js")," or ",(0,i.mdx)("inlineCode",{parentName:"li"},"Python")," installed on your machine and basic familiarity with ",(0,i.mdx)("inlineCode",{parentName:"li"},"JavaScript")," or ",(0,i.mdx)("inlineCode",{parentName:"li"},"Python"),".")),(0,i.mdx)("h2",{id:"step-1-set-up-your-environment"},"Step 1: Set Up Your Environment"),(0,i.mdx)("p",null,"Begin by creating a new script, named ",(0,i.mdx)("inlineCode",{parentName:"p"},"firefly.js")," (or ",(0,i.mdx)("inlineCode",{parentName:"p"},"firefly.py"),"), and save it anywhere on your computer., and save it anywhere on your computer. This will be the script we use to test our integration with Firefly API endpoints."),(0,i.mdx)("p",null,"Next, set your ",(0,i.mdx)("inlineCode",{parentName:"p"},"client_id")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"client_secret")," as environment variables. For example, on a Mac or in Windows Subsystem for Linux (WSL), you can do the following:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"export CLIENT_ID=YOURIDHERE\nexport CLIENT_SECRET=YOURSECRETHERE\n")),(0,i.mdx)("p",null,"Note that our code is going to assume CLIENT_ID and CLIENT_SECRET - case matters!"),(0,i.mdx)("h2",{id:"step-2-authentication"},"Step 2: Authentication"),(0,i.mdx)("p",null,"Let's begin by initializing a few variables. As previously mentioned, it is crucial to set up two environment variables, as the following code relies on them:"),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"/* Set our creds based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n")),(0,i.mdx)("h4",{id:"sample-code-1"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"#Set our creds based on environment variables.\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n")),(0,i.mdx)("p",null,"To authenticate, we take these two variables and make a ",(0,i.mdx)("inlineCode",{parentName:"p"},"POST")," request to our authentication endpoint:Â ",(0,i.mdx)("inlineCode",{parentName:"p"},"https://ims-na1.adobelogin.com/ims/token/v3"),". You need to pass your credentials along with the requested scopes that allow for access to Firefly. We can wrap up the entire thing in one simple function:"),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-2"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"async function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n")),(0,i.mdx)("h4",{id:"sample-code-3"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def getAccessToken(id, secret):\n    response = requests.post(f"https://ims-na1.adobelogin.com/ims/token/v3?client_id={id}&client_secret={secret}&grant_type=client_credentials&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis")\n    return response.json()["access_token"]\n\ntoken = getAccessToken(CLIENT_ID, CLIENT_SECRET)\n')),(0,i.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"The provided code example does not include error handling for credentials. For production code, it's essential to implement proper error handling to ensure the security and reliability of your application."),(0,i.mdx)("h2",{id:"step-3-generate-an-image-with-a-prompt"},"Step 3: Generate an Image with a Prompt"),(0,i.mdx)("p",null,"For our demo, we will use Firefly to generate four images from a single prompt."),(0,i.mdx)("p",null,"In this case, we will focus on the Text-to-image functionality, which includes optional generative matching."),(0,i.mdx)(p,{variant:"help",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Please refer to the ",(0,i.mdx)("a",{parentName:"p",href:"../api/generative_expand/index.md"},"Text-to-image")," with optional generative match section in the API Reference for more details."),(0,i.mdx)("p",null,"Based on the docs, we can see that the only required parameter is prompt. Also, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"n")," prompt specifies how many images we want. So the simplest request body we could build would look like so:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'{\n    "prompt":"a cat dancing on a rainbow",\n    "n":4\n}\n')),(0,i.mdx)("p",null,"Now, let's create a function to generate an image using a prompt."),(0,i.mdx)("p",null,"First, we'll build a simple function to call the REST endpoint.\nIt requires our previous ",(0,i.mdx)("inlineCode",{parentName:"p"},"client_id")," value and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"access_token"),", and our prompt:"),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-4"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"async function textToImage(prompt, id, token) {\n\n    let body = {\n        \"n\":4,\n        prompt\n    }\n\n\n    let req = await fetch('https://firefly-api.adobe.io/v2/images/generate', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':`Bearer ${token}`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n")),(0,i.mdx)("h4",{id:"sample-code-5"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'def textToImage(text, id, token):\n\n    data = {\n        "prompt":text,\n        "n":4,\n    }\n\n\n    response = requests.post("https://firefly-api.adobe.io/v2/images/generate", json=data, headers = {\n        "X-API-Key":id, \n        "Authorization":f"Bearer {token}",\n        "Content-Type":"application/json"\n    }) \n\n    return response.json()\n')),(0,i.mdx)("p",null,"Please ensure you include the authentication headers correctly. Pass the token in the Authorization header and the ",(0,i.mdx)("inlineCode",{parentName:"p"},"client ID")," in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"X-Api-Key")," header. The API will return a JSON string for you to process and return to the caller."),(0,i.mdx)("h3",{id:"executing-the-firefly-api-call"},"Executing the Firefly API Call"),(0,i.mdx)("p",null,"We define a simple prompt and call the function to interact with the Firefly API, displaying the result on the screen."),(0,i.mdx)(m,{slots:"heading, code",repeat:"3",languages:"JavaScript, PYTHON, JSON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-6"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"let prompt = 'a cat dancing on a rainbow';\nlet result = await textToImage(prompt, CLIENT_ID, token);\nconsole.log(JSON.stringify(result, null, '\\t'));\n")),(0,i.mdx)("h4",{id:"sample-code-7"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'prompt = "a cat dancing on a rainbow"\nresult = textToImage(prompt, CLIENT_ID, token)\nprint(json.dumps(result, indent=True))\n')),(0,i.mdx)("h4",{id:"response"},"Response"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},'{\n        "version": "2.10.2",\n        "size": {\n                "width": 2048,\n                "height": 2048\n        },\n        "predictedContentClass": "art",\n        "outputs": [\n                {\n                        "seed": 1003577025,\n                        "image": {\n                                "id": "723779df-6388-49b7-81bc-81f735bd2423",\n                                "presignedUrl": "https://pre-signed-firefly-prod.s3.amazonaws.com/images/723779df-6388-49b7-81bc-81f735bd2423?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDA3TX66LLPDOIWV%2F20240229%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240229T212734Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c8cb7c08a954d1990c26308edf13992a479c7da220ae6797252c4f03ad7c39e"\n                        }\n                },\n                {\n                        "seed": 2103068358,\n                        "image": {\n                                "id": "ae302228-e6bb-435e-8e49-6db12b9a619b",\n                                "presignedUrl": "https://pre-signed-firefly-prod.s3.amazonaws.com/images/ae302228-e6bb-435e-8e49-6db12b9a619b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDA3TX66LLPDOIWV%2F20240229%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240229T212734Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c9dccb63e2824b69984b4717204774358ae198d9597d340a712a4563dfe607df"\n                        }\n                }\n        ]\n}\n')),(0,i.mdx)("p",null,"This function sends a POST request to the Firefly API with the prompt and retrieves the generated images. Replace ",(0,i.mdx)("inlineCode",{parentName:"p"},"a cat dancing on a rainbow")," with your desired prompt."),(0,i.mdx)("p",null,"You can copy and paste any of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"presignedUrl")," values from the result to view the images."),(0,i.mdx)("h2",{id:"step-4-downloading-images-from-firefly-api"},"Step 4: Downloading Images from Firefly API"),(0,i.mdx)("p",null,"Let's see how you can write a quick utility to download these images."),(0,i.mdx)("h3",{id:"import-the-required-modules"},"Import the Required Modules"),(0,i.mdx)("p",null,"First, import the necessary file-related modules and the requests module for Python:"),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-8"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n")),(0,i.mdx)("h4",{id:"sample-code-9"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"import requests \n")),(0,i.mdx)("h3",{id:"define-the-downloadfile-function"},"Define the ",(0,i.mdx)("inlineCode",{parentName:"h3"},"downloadFile")," function"),(0,i.mdx)("p",null,"Create a function that takes a URL and a file path as arguments, and downloads the file from the URL to the specified path (This step is only required for Node.js)."),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-10"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"async function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n")),(0,i.mdx)("h4",{id:"sample-code-11"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"def downloadFile(url, filePath):\n    with open(filePath,'wb') as output:\n        bits = requests.get(url, stream=True).content\n        output.write(bits)\n")),(0,i.mdx)("h3",{id:"iterate-over-the-results-and-save-each-image"},"Iterate over the results and save each image"),(0,i.mdx)("p",null,"Finally, iterate over the results (assuming result contains the response from the API call) and save each image with a unique file name using the seed value from the result:"),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-12"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"for(let output of result.outputs) {\n    let fileName = `./${output.seed}.jpg`;\n    await downloadFile(output.image.presignedUrl, fileName);\n}\n")),(0,i.mdx)("h4",{id:"sample-code-13"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'for output in result["outputs"]:\n    fileName = f\'./{output["seed"]}.jpg\';\n    downloadFile(output["image"]["presignedUrl"], fileName);\n')),(0,i.mdx)("p",null,"After running these steps, you'll see four images output in the same directory."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Sample output")),(0,i.mdx)("p",null,(0,i.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"607px"}},"\n      ",(0,i.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"90.9375%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,i.mdx)("picture",{parentName:"span"},"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/5530d/firefly-sample.webp 320w","/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/f1b45/firefly-sample.webp 607w"],sizes:"(max-width: 607px) 100vw, 607px",type:"image/webp"}),"\n          ",(0,i.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/dd4a7/firefly-sample.png 320w","/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/f521d/firefly-sample.png 607w"],sizes:"(max-width: 607px) 100vw, 607px",type:"image/png"}),"\n          ",(0,i.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/f521d/firefly-sample.png",alt:"a cat dancing on a rainbow",title:"a cat dancing on a rainbow",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,i.mdx)("h2",{id:"complete-code"},"Complete Code"),(0,i.mdx)("p",null,"Here's the entire code sample. As a reminder, feel free to modify and change the prompt."),(0,i.mdx)(p,{variant:"warning",slots:"title, text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"IMPORTANT"),(0,i.mdx)("p",null,"Note that this Node.js code uses imports and top-level ",(0,i.mdx)("inlineCode",{parentName:"p"},"await"),", so you must either use the ",(0,i.mdx)("inlineCode",{parentName:"p"},".mjs")," extension on your script file or ensure you have a ",(0,i.mdx)("inlineCode",{parentName:"p"},"package.json")," with ",(0,i.mdx)("inlineCode",{parentName:"p"},'type: "module"'),"."),(0,i.mdx)(m,{slots:"heading, code",repeat:"2",languages:"JavaScript, PYTHON",mdxType:"CodeBlock"}),(0,i.mdx)("h4",{id:"sample-code-14"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-js"},"import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n\n/*\nSet our creds based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n\n\nasync function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n\nasync function textToImage(prompt, id, token) {\n\n    let body = {\n        \"n\":4,\n        prompt\n    }\n\n\n    let req = await fetch('https://firefly-api.adobe.io/v2/images/generate', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':`Bearer ${token}`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n\nlet prompt = 'a cat dancing on a rainbow';\nlet result = await textToImage(prompt, CLIENT_ID, token);\nconsole.log(JSON.stringify(result,null,'\\t'));\n\nasync function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n\nfor(let output of result.outputs) {\n    let fileName = `./${output.seed}.jpg`;\n    await downloadFile(output.image.presignedUrl, fileName);\n}\n")),(0,i.mdx)("h4",{id:"sample-code-15"},"Sample code"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},'import os \nimport requests \nimport json \n\n#Set our creds based on environment variables.\nCLIENT_ID = os.environ.get(\'CLIENT_ID\')\nCLIENT_SECRET = os.environ.get(\'CLIENT_SECRET\')\n\ndef getAccessToken(id, secret):\n    response = requests.post(f"https://ims-na1.adobelogin.com/ims/token/v3?client_id={id}&client_secret={secret}&grant_type=client_credentials&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis")\n    return response.json()["access_token"]\n\ntoken = getAccessToken(CLIENT_ID, CLIENT_SECRET)\n\ndef textToImage(text, id, token):\n\n    data = {\n        "prompt":text,\n        "n":4,\n    }\n\n\n    response = requests.post("https://firefly-api.adobe.io/v2/images/generate", json=data, headers = {\n        "X-API-Key":id, \n        "Authorization":f"Bearer {token}",\n        "Content-Type":"application/json"\n    }) \n\n    return response.json()\n\n\nprompt = "a cat dancing on a rainbow"\nresult = textToImage(prompt, CLIENT_ID, token)\nprint(json.dumps(result, indent=True))\n\ndef downloadFile(url, filePath):\n    with open(filePath,\'wb\') as output:\n        bits = requests.get(url, stream=True).content\n        output.write(bits)\n\nfor output in result["outputs"]:\n    fileName = f\'./{output["seed"]}.jpg\';\n    downloadFile(output["image"]["presignedUrl"], fileName);\n')))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-firefly-api-guides-how-tos-create-your-first-ff-application-md-91ba94a3d282766cce57.js.map