"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4451],{88431:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return c},default:function(){return m}});var a=t(58168),s=t(80045),o=(t(88763),t(15680)),r=t(83407);const i=["components"],c={},p=(d="CodeBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var d;const l={_frontmatter:c},u=r.A;function m(e){let{components:n}=e,t=(0,s.A)(e,i);return(0,o.mdx)(u,(0,a.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"quickstart-guide"},"Quickstart Guide"),(0,o.mdx)("p",null,"Automating Content Workflows with Firefly Services APIs"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null}),(0,o.mdx)("th",{parentName:"tr",align:null}))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("span",{parentName:"td",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"75.625%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/5530d/original.webp 320w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/0c8fb/original.webp 640w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/94b1e/original.webp 1280w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/0b34d/original.webp 1920w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/d5269/original.webp 2560w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/238ba/original.webp 3874w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/8980b/original.jpg 320w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/56d4e/original.jpg 640w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/62aaf/original.jpg 1280w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/aaf92/original.jpg 1920w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/36eba/original.jpg 2560w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/d954d/original.jpg 3874w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/62aaf/original.jpg",alt:"a picture of a burger with a black background",title:"a picture of a burger with a black background",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")," ",(0,o.mdx)("p",{style:{textAlign:"center"}},"Original Image")),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("span",{parentName:"td",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"77.8125%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/5530d/output.webp 320w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/0c8fb/output.webp 640w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/94b1e/output.webp 1280w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/0b34d/output.webp 1920w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/4589a/output.webp 2304w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/8980b/output.jpg 320w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/56d4e/output.jpg 640w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/62aaf/output.jpg 1280w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/aaf92/output.jpg 1920w","/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/0e09b/output.jpg 2304w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/4f97b20fdb33f7225b50a06ad638fea7/62aaf/output.jpg",alt:"a picture of a burger with a fiery background and enhanced lighting",title:"a picture of a burger with a fiery background and enhanced lighting",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")," ",(0,o.mdx)("p",{style:{textAlign:"center"}},"Output Image"))))),(0,o.mdx)("h2",{id:"overview"},"Overview"),(0,o.mdx)("p",null,"In this tutorial, let's imagine we are working for a creative marketing team at a gourmet food chain specializing in premium burgers. Our goal is to develop a visually stunning online menu and promotional materials that highlight the mouthwatering appeal of our products to customers worldwide. We will leverage Adobe's Firefly Services APIs to automate our content workflow:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Remove Backgrounds:")," use the Photoshop Remove Background API to eliminate distracting backgrounds from our product images, allowing the items to stand out."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Enhance Images with Generate Object Composite:")," Use the Firefly Generate Object Composite API to add creative and contextually relevant backgrounds that enhance the aesthetic appeal of each product."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"Optimize Image Quality:")," Utilize the Lightroom Auto Tone API to automatically adjust lighting and color balance, ensuring consistent and professional-quality images across our catalog.")),(0,o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.mdx)("h3",{id:"credentials"},"Credentials"),(0,o.mdx)("p",null,"If you don't already have a Firefly Services ",(0,o.mdx)("strong",{parentName:"p"},"Client ID")," and ",(0,o.mdx)("strong",{parentName:"p"},"Client Secret")," (which gives you access to Firefly APIs, Photoshop APIs, Lightroom APIs, and more), retrieve them from your ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/developer-console/docs/guides/services/services-add-api-oauth-s2s/#api-overview"},"Adobe Developer Console project")," before reading further. ",(0,o.mdx)("strong",{parentName:"p"},"Securely store these credentials and never expose them in client-side or public code.")),(0,o.mdx)("h3",{id:"set-up-your-environment"},"Set Up Your Environment"),(0,o.mdx)("p",null,"Before we begin this tutorial, run the following in a secure terminal:"),(0,o.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"javascript"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"mkdir firefly-services-content-workflow-tutorial\ncd firefly-services-content-workflow-tutorial\nnpm init --y\nnpm install axios qs\ntouch index.js\n")),(0,o.mdx)("h4",{id:"python"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"mkdir firefly-services-content-workflow-tutorial\ncd firefly-services-content-workflow-tutorial\npython -m pip install requests\ntouch main.py\n")),(0,o.mdx)("h3",{id:"pre-signed-urls"},"Pre-signed URLs"),(0,o.mdx)("p",null,"To interact with Adobe's Firefly Services APIs, you'll need to generate pre-signed URLs. These URLs grant temporary access to your storage resources without exposing your credentials. For more details about pre-signed URLs, see ",(0,o.mdx)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html"},"AWS Sharing objects with presigned URLs"),", or ",(0,o.mdx)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview"},"Azure Storage resources using shared access signatures"),"."),(0,o.mdx)("p",null,"In this tutorial, you will need:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"A pre-signed URL with read access for the input image. Save this sample image to your cloud storage and generate a pre-signed URL: ",(0,o.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"75.625%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/5530d/original.webp 320w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/0c8fb/original.webp 640w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/94b1e/original.webp 1280w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/0b34d/original.webp 1920w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/d5269/original.webp 2560w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/238ba/original.webp 3874w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/8980b/original.jpg 320w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/56d4e/original.jpg 640w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/62aaf/original.jpg 1280w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/aaf92/original.jpg 1920w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/36eba/original.jpg 2560w","/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/d954d/original.jpg 3874w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/6d6cc0cb0f39cbcaa228469d257daec4/62aaf/original.jpg",alt:"a picture of a burger with a black background",title:"a picture of a burger with a black background",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,o.mdx)("li",{parentName:"ul"},"A pre-signed URL with read access for the style reference image below. Save this sample image to your cloud storage and generate a pre-signed URL: ",(0,o.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"1280px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"66.5625%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/c297b3a98f220230f344944bb626474b/5530d/styleref.webp 320w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/0c8fb/styleref.webp 640w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/94b1e/styleref.webp 1280w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/0b34d/styleref.webp 1920w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/d5269/styleref.webp 2560w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/7a2a4/styleref.webp 6720w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/c297b3a98f220230f344944bb626474b/8980b/styleref.jpg 320w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/56d4e/styleref.jpg 640w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/62aaf/styleref.jpg 1280w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/aaf92/styleref.jpg 1920w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/36eba/styleref.jpg 2560w","/ff-services-docs/static/c297b3a98f220230f344944bb626474b/e318f/styleref.jpg 6720w"],sizes:"(max-width: 1280px) 100vw, 1280px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/c297b3a98f220230f344944bb626474b/62aaf/styleref.jpg",alt:"a styre reference of a burger with a fiery background",title:"a styre reference of a burger with a fiery background",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,o.mdx)("li",{parentName:"ul"},"A pre-signed URL with a read/write token for the modified image.")),(0,o.mdx)("p",null,"Depending on your learning style, you may prefer to walk through this tutorial step-by-step or ",(0,o.mdx)("a",{parentName:"p",href:"#full-example"},"jump immediately to the full source code"),"."),(0,o.mdx)("h2",{id:"retrieve-an-access-token"},"Retrieve an Access Token"),(0,o.mdx)("p",null,"Open a secure terminal and ",(0,o.mdx)("inlineCode",{parentName:"p"},"export")," your ",(0,o.mdx)("strong",{parentName:"p"},"Client ID")," and ",(0,o.mdx)("strong",{parentName:"p"},"Client Secret")," as environment variables so that your later commands can access them:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"export FIREFLY_SERVICES_CLIENT_ID=yourClientIdAsdf123\nexport FIREFLY_SERVICES_CLIENT_SECRET=yourClientSecretAsdf123\n")),(0,o.mdx)("p",null,"Generate an access token:"),(0,o.mdx)(p,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"curl --location 'https://ims-na1.adobelogin.com/ims/token/v3' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode \"client_id=$FIREFLY_SERVICES_CLIENT_ID\" \\\n--data-urlencode \"client_secret=$FIREFLY_SERVICES_CLIENT_SECRET\" \\\n--data-urlencode 'scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis'\n")),(0,o.mdx)("h4",{id:"python-1"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"def retrieve_access_token():\n    client_id = os.environ['FIREFLY_SERVICES_CLIENT_ID']\n    client_secret = os.environ['FIREFLY_SERVICES_CLIENT_SECRET']\n\n    token_url = 'https://ims-na1.adobelogin.com/ims/token/v3'\n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis'\n    }\n\n    response = requests.post(token_url, data=payload)\n    response.raise_for_status()\n    token_data = response.json()\n    print(\"Access Token Retrieved\")\n    return token_data['access_token']\n")),(0,o.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"async function retrieveAccessToken() {\n  const data = qs.stringify({\n    grant_type: 'client_credentials',\n    client_id: process.env.FIREFLY_SERVICES_CLIENT_ID,\n    client_secret: process.env.FIREFLY_SERVICES_CLIENT_SECRET,\n    scope: 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis',\n  });\n\n  const config = {\n    method: 'post',\n    url: 'https://ims-na1.adobelogin.com/ims/token/v3',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    data: data,\n  };\n\n  try {\n    const response = await axios.request(config);\n    console.log('Access Token Retrieved');\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error retrieving access token:', error.response.data);\n  }\n}\n")),(0,o.mdx)("p",null,"The response will look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{"access_token":"yourAccessTokenAsdf123","token_type":"bearer","expires_in":86399}\n')),(0,o.mdx)("p",null,"Export this access token in your secure terminal so that the next script can conveniently access it:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"export FIREFLY_SERVICES_ACCESS_TOKEN=yourAccessTokenAsdf123\n")),(0,o.mdx)("h2",{id:"remove-background---photoshop-api"},"Remove Background - Photoshop API"),(0,o.mdx)("p",null,"Next, call the ",(0,o.mdx)("a",{parentName:"p",href:"../../photoshop/api/photoshop_removeBackground.md"},"Photoshop Remove Background API"),":"),(0,o.mdx)(p,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl-1"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'curl --location \'https://image.adobe.io/sensei/cutout\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: application/json\' \\\n--header "x-api-key: $FIREFLY_SERVICES_CLIENT_ID" \\\n--header "Authorization: Bearer $FIREFLY_SERVICES_ACCESS_TOKEN" \\\n--data \'{\n    "input":{\n      "href":"https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...",\n      "storage":"azure"\n    },\n    "output":{\n      "href":"https://your-storage-bucket-name.blob.core.windows.net:443/container/output.jpeg?sv...&query=params...",\n      "storage":"azure"\n    }\n  }\'\n')),(0,o.mdx)("h4",{id:"python-2"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Replace with your actual pre-signed URLs and storage option\nSIGNED_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'\nSIGNED_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'\nSTORAGE = 'azure'  # e.g., 'external', 'azure'\n\ndef remove_background(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['FIREFLY_SERVICES_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'input': {\n            'href': SIGNED_GET_URL,\n            'storage': STORAGE\n        },\n        'output': {\n            'href': SIGNED_POST_URL,\n            'storage': STORAGE\n        }\n    }\n\n    response = requests.post('https://image.adobe.io/sensei/cutout', headers=headers, json=data)\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Remove Background Job Submitted:\", job_response)\n    return job_response\n")),(0,o.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const SIGNED_GET_URL = \"https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...\";\nconst SIGNED_POST_URL = \"https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...\";\nconst STORAGE = \"azure\"; // e.g., 'external', 'azure'\n\nasync function removeBackground(accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    input: { href: SIGNED_GET_URL, storage: STORAGE },\n    output: { href: SIGNED_POST_URL, storage: STORAGE },\n  };\n\n  const config = {\n    method: 'post',\n    url: 'https://image.adobe.io/sensei/cutout',\n    headers: headers,\n    data: data,\n  };\n\n  try {\n    const response = await axios.request(config);\n    console.log('Remove Background Job Submitted:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during removeBackground:', error.response.data);\n  }\n}\n")),(0,o.mdx)("p",null,"The response will look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "_links": {\n    "self": {\n      "href": "https://image.adobe.io/sensei/status/<:jobId>"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Wait for a success status of this job. A sample of this is provided in the ",(0,o.mdx)("a",{parentName:"p",href:"../../photoshop/quickstart/index.md#get-status---mask"},"Photoshop Quickstart Guide"),"."),(0,o.mdx)("h2",{id:"generate-object-composite---firefly-api"},"Generate Object Composite - Firefly API"),(0,o.mdx)("p",null,"Next, call the ",(0,o.mdx)("a",{parentName:"p",href:"../../firefly-api/guides/api/generate-object-composite/V3_Async/"},"Firefly Generate Object Composite API"),":"),(0,o.mdx)(p,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl-2"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'curl --location \'https://firefly-api.adobe.io/v3/images/generate-object-composite-async\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: application/json\' \\\n--header "x-api-key: $FIREFLY_SERVICES_CLIENT_ID" \\\n--header "Authorization: Bearer $FIREFLY_SERVICES_ACCESS_TOKEN" \\\n--data \'{\n    "prompt": "A delicious fiery background",\n    "contentClass": "photo",\n    "image": {\n        "source": {\n            "url": "https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params..."\n        }\n    },\n    "placement": {\n        "alignment": {\n            "horizontal": "center",\n            "vertical": "center"\n        }\n    },\n    "style": {\n        "imageReference": {\n            "source": {\n                "url": "https://your-storage-bucket-name.blob.core.windows.net:443/container/style_ref.jpeg?sv...&query=params..."\n            }\n        },\n        "strength": 50\n    }\n}\'\n')),(0,o.mdx)("h4",{id:"python-3"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Replace with your actual pre-signed URLs\nSIGNED_IMAGE_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...'\nSIGNED_STYLEREF_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/container/style_ref.jpeg?sv...&query=params...'\n\ndef generate_object_composite(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['FIREFLY_SERVICES_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'prompt': 'A delicious fiery background',  # Replace with your actual prompt\n        'contentClass': 'photo',\n        'image': {\n            'source': {\n                'url': SIGNED_IMAGE_GET_URL\n            }\n        },\n        'placement': {\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center'\n            }\n        },\n        'style': {\n            'imageReference': {\n                'source': {\n                    'url': SIGNED_STYLEREF_GET_URL\n                }\n            },\n            'strength': 50\n        }\n    }\n\n    response = requests.post(\n        'https://firefly-api.adobe.io/v3/images/generate-object-composite-async',\n        headers=headers,\n        json=data\n    )\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Generate Object Composite Job Submitted:\", job_response)\n    return job_response\n")),(0,o.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'const SIGNED_IMAGE_GET_URL = \'https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...\'; // Replace with your image URL\nconst SIGNED_STYLEREF_GET_URL = \'https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...\';  // Replace with your mask URL\n\nasync function generateObjectComposite(accessToken) {\n  const headers = {\n    "Content-Type": "application/json",\n    Accept: "application/json",\n    "x-api-key": process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    prompt: "A delicious firey background", // Replace with your actual prompt\n    contentClass: "photo",\n    image: {\n      source: {\n        url: SIGNED_IMAGE_GET_URL,\n      },\n    },\n    placement: {\n        alignment: {\n            horizontal: "center",\n            vertical: "center"\n        }\n    },\n    style: {\n        imageReference: {\n            source: {\n                url: SIGNED_STYLEREF_GET_URL\n            }\n        },\n        strength: 50\n    }\n  };\n\n  const config = {\n    method: "post",\n    url: "https://firefly-api.adobe.io/v3/images/generate-object-composite-async",\n    headers: headers,\n    data: data,\n  };\n\n  try {\n    const response = await axios.request(config);\n    return response.data;\n  } catch (error) {\n    console.error("Error during generateObjectComposite:", error);\n  }\n}\n')),(0,o.mdx)("p",null,"The response will look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "jobId": "urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-1111",\n  "statusUrl": "https://firefly-api.adobe.io/v3/status/urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-1111",\n  "cancelUrl": "https://firefly-api.adobe.io/v3/cancel/urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-1111"\n}\n')),(0,o.mdx)("p",null,"Wait for a success status of this job. A sample of this is provided in the ",(0,o.mdx)("a",{parentName:"p",href:"../../firefly-api/guides/how-tos/using-async-apis.md#generating-images-with-the-async-api"},"Firefly API Tutorials"),"."),(0,o.mdx)("h2",{id:"auto-tone---lightroom-api"},"Auto Tone - Lightroom API"),(0,o.mdx)("p",null,"Next, call the ",(0,o.mdx)("a",{parentName:"p",href:"../../lightroom/api/lightroom_autoTone.md"},"Lightroom Auto Tone API"),":"),(0,o.mdx)(p,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl-3"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'curl --location \'https://image.adobe.io/lrService/autoTone\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: application/json\' \\\n--header "x-api-key: $FIREFLY_SERVICES_CLIENT_ID" \\\n--header "Authorization: Bearer $FIREFLY_SERVICES_ACCESS_TOKEN" \\\n--data \'{\n    "inputs":{\n      "href":"https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...",\n      "storage":"azure"\n    },\n    "outputs":[{\n      "href":"https://your-storage-bucket-name.blob.core.windows.net:443/container/output.jpeg?sv...&query=params...",\n      "storage":"azure",\n      "type":"image/jpeg"\n    }]\n  }\'\n')),(0,o.mdx)("h4",{id:"python-4"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Replace with your actual pre-signed URLs and storage option\nSIGNED_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...'\nSIGNED_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/container/output.jpeg?sv...&query=params...'\nstorage = 'azure'  # e.g., 'external', 'azure'\n\ndef auto_tone(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['FIREFLY_SERVICES_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'inputs': {\n            'href': SIGNED_GET_URL,\n            'storage': STORAGE\n        },\n        'outputs': [{\n            'href': SIGNED_POST_URL,\n            'storage': STORAGE,\n            'type': 'image/jpeg'\n        }]\n    }\n\n    response = requests.post('https://image.adobe.io/lrService/autoTone', headers=headers, json=data)\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Auto Tone Job Submitted:\", job_response)\n    return job_response\n")),(0,o.mdx)("h4",{id:"javascript-4"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},' const SIGNED_GET_URL = "https://your-storage-bucket-name.blob.core.windows.net:443/container/input.jpeg?sv...&query=params...";\n  const SIGNED_POST_URL = "https://your-storage-bucket-name.blob.core.windows.net:443/container/output.jpeg?sv...&query=params...";\n  const STORAGE = "azure"; // e.g., \'external\', \'azure\'\n\nasync function autoTone(accessToken) {\n  const headers = {\n    "Content-Type": "application/json",\n    Accept: "application/json",\n    "x-api-key": process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    inputs: {\n      href: SIGNED_GET_URL,\n      storage: storage,\n    },\n    outputs: [\n      {\n        href: SIGNED_POST_URL,\n        storage: storage,\n        type: "image/jpeg",\n      },\n    ],\n  };\n\n  const config = {\n    method: "post",\n    url: "https://image.adobe.io/lrService/autoTone",\n    headers: headers,\n    data: data,\n  };\n\n  try {\n    const response = await axios.request(config);\n    return response.data;\n  } catch (error) {\n    console.error("Error during autoTone:", error);\n  }\n}\n')),(0,o.mdx)("p",null,"The response will look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "_links": {\n    "self": {\n      "href": "https://image.adobe.io/lrService/status/<:jobId>"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"Wait for a success status of this job. A sample of this is provided in the ",(0,o.mdx)("a",{parentName:"p",href:"../../lightroom/quickstart/index.md#get-status"},"Lightroom API Quickstart Guide"),"."),(0,o.mdx)("h2",{id:"view-final-image"},"View Final Image"),(0,o.mdx)("p",null,"Access the final at the ",(0,o.mdx)("inlineCode",{parentName:"p"},"outputs[0]._links.self.href")," URL (the ",(0,o.mdx)("inlineCode",{parentName:"p"},"SIGNED_POST_URL")," provided earlier). 🎉"),(0,o.mdx)("h2",{id:"full-example"},"Full Example"),(0,o.mdx)("p",null,"You can review the ",(0,o.mdx)("a",{parentName:"p",href:"#prerequisites"},"prerequisites")," section to understand how to set up your environment prior to running this code. Note that this is an example only and is not production-ready and requires additional error handling, logging, security measures, and more before you can run it at scale in a live application."),(0,o.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"python-5"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"import os\nimport time\nimport requests\n\n# Replace with your actual pre-signed URLs and storage option\nSIGNED_PRODUCT_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'  # Input product URL for Photoshop \nSIGNED_GET_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'  # Output product URL for Photoshop and Lightroom\nSIGNED_STYLE_REF_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'  # Style reference image URL for Firefly\nSTORAGE = 'azure'  # e.g., 'external', 'azure'\n\ndef main():\n    access_token = retrieve_access_token()\n\n    # Step 1: Remove Background\n    remove_bg_response = remove_background(access_token)\n    remove_bg_job_id = extract_job_id(remove_bg_response)\n    check_photoshop_job_status(remove_bg_job_id, access_token)\n\n    # Step 2: Generate Object Composite\n    generate_object_composite_response = generate_object_composite(access_token)\n    generate_object_composite_job_id = generate_object_composite_response['jobId']\n    generate_object_composite_output = check_firefly_job_status(generate_object_composite_job_id, access_token)\n\n    # Step 3: Auto Tone\n    auto_tone_response = auto_tone(access_token, generate_object_composite_output)\n    auto_tone_job_id = extract_job_id(auto_tone_response)\n    check_lightroom_job_status(auto_tone_job_id, access_token)\n\ndef retrieve_access_token():\n    client_id = os.environ['FIREFLY_SERVICES_CLIENT_ID']\n    client_secret = os.environ['FIREFLY_SERVICES_CLIENT_SECRET']\n\n    token_url = 'https://ims-na1.adobelogin.com/ims/token/v3'\n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis'\n    }\n\n    response = requests.post(token_url, data=payload)\n    response.raise_for_status()\n    token_data = response.json()\n    print(\"Access Token Retrieved\")\n    return token_data['access_token']\n\ndef remove_background(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['FIREFLY_SERVICES_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'input': {\n            'href': SIGNED_PRODUCT_URL,\n            'storage': STORAGE\n        },\n        'output': {\n            'href': SIGNED_GET_POST_URL,\n            'storage': STORAGE\n        }\n    }\n\n    response = requests.post('https://image.adobe.io/sensei/cutout', headers=headers, json=data)\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Remove Background Job Submitted:\", job_response)\n    return job_response\n\ndef check_photoshop_job_status(job_id, access_token):\n    headers = {\n        'x-api-key': os.environ['FIREFLY_SERVICES_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    url = f'https://image.adobe.io/sensei/status/{job_id}'\n\n    status = 'submitted'\n    while status not in ['succeeded', 'failed']:\n        time.sleep(5)  # Wait for 5 seconds\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        status_response = response.json()\n        status = status_response.get('status')\n        print(f'Photoshop Job Status: {status}')\n\n    if status == 'succeeded':\n        print('Background removal completed successfully!')\n    else:\n        print('Background removal failed.')\n\ndef generate_object_composite(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['FIREFLY_SERVICES_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'prompt': 'A delicious fiery background',  # Replace with your actual prompt\n        'contentClass': 'photo',\n        'image': {\n            'source': {\n                'url': SIGNED_GET_POST_URL\n            }\n        },\n        'placement': {\n            'alignment': {\n                'horizontal': 'center',\n                'vertical': 'center'\n            }\n        },\n        'style': {\n            'imageReference': {\n                'source': {\n                    'url': SIGNED_STYLE_REF_URL\n                }\n            },\n            'strength': 50\n        }\n    }\n\n    response = requests.post(\n        'https://firefly-api.adobe.io/v3/images/generate-object-composite-async',\n        headers=headers,\n        json=data\n    )\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Generate Object Composite Job Submitted:\", job_response)\n    return job_response\n\ndef check_firefly_job_status(job_id, access_token):\n    client_id = os.environ['FIREFLY_SERVICES_CLIENT_ID']\n\n    headers = {\n        'x-api-key': client_id,\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    url = f'https://firefly-api.adobe.io/v3/status/{job_id}'\n\n    status = 'pending'\n    while status not in ['succeeded', 'failed', 'cancelled']:\n        time.sleep(5)  # Wait for 5 seconds\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        status_response = response.json()\n        status = status_response.get('status')\n        print(f'Firefly Job Status: {status}')\n\n    if status == 'succeeded':\n        print('Object composite generation completed successfully!')\n        image_url = status_response['result']['outputs'][0]['image']['url']\n        print(f'You can access the image at: {image_url}')\n        return image_url\n    else:\n        print('Object composite generation failed.')\n\ndef auto_tone(access_token, signed_input_url):\n    client_id = os.environ['FIREFLY_SERVICES_CLIENT_ID']\n\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': client_id,\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'inputs': {\n            'href': signed_input_url,\n            'storage': 'external'\n        },\n        'outputs': [{\n            'href': SIGNED_GET_POST_URL,\n            'storage': STORAGE,\n            'type': 'image/jpeg'\n        }]\n    }\n\n    response = requests.post('https://image.adobe.io/lrService/autoTone', headers=headers, json=data)\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Auto Tone Job Submitted:\", job_response)\n    return job_response\n\ndef check_lightroom_job_status(job_id, access_token):\n    client_id = os.environ['FIREFLY_SERVICES_CLIENT_ID']\n\n    headers = {\n        'x-api-key': client_id,\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    url = f'https://image.adobe.io/lrService/status/{job_id}'\n\n    status = 'pending'\n    while status not in ['succeeded', 'failed']:\n        time.sleep(5)  # Wait for 5 seconds\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        status_response = response.json()\n        outputs = status_response.get('outputs', [])\n        if outputs:\n            status = outputs[0].get('status')\n        print(f'Lightroom Job Status: {status}')\n\n    if status == 'succeeded':\n        print('Auto tone completed successfully!')\n        print('You can access the image at your SIGNED_POST_URL.')\n    else:\n        print('Auto tone failed.')\n\ndef extract_job_id(response):\n    href = response['_links']['self']['href']\n    return href.split('/')[-1]\n\nif __name__ == '__main__':\n    main()\n")),(0,o.mdx)("h4",{id:"javascript-5"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const axios = require('axios');\nconst qs = require('qs');\n\n// Replace with your actual pre-signed URLs and storage option\nconst SIGNED_PRODUCT_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'; // Input product URL for Photoshop\nconst SIGNED_GET_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'; // Output product URL for Photoshop and Lightroom\nconst SIGNED_STYLE_REF_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'; // Style reference image URL for Firefly\nconst STORAGE = 'azure'; // e.g., 'external', 'azure'\n\n(async () => {\n  const accessToken = await retrieveAccessToken();\n\n  // Step 1: Remove Background\n  const removeBgResponse = await removeBackground(accessToken);\n  const removeBgJobId = extractJobId(removeBgResponse);\n  await checkPhotoshopJobStatus(removeBgJobId, accessToken);\n\n  // Step 2: Generate Object Composite\n  const generateObjectCompositeResponse = await generateObjectComposite(accessToken);\n  const generateObjectCompositeJobId = generateObjectCompositeResponse.jobId;\n  const compositeOutputUrl = await checkFireflyJobStatus(generateObjectCompositeJobId, accessToken);\n\n  // Step 3: Auto Tone\n  const autoToneResponse = await autoTone(accessToken, compositeOutputUrl);\n  const autoToneJobId = extractJobId(autoToneResponse);\n  await checkLightroomJobStatus(autoToneJobId, accessToken);\n})();\n\nasync function retrieveAccessToken() {\n  const clientId = process.env.FIREFLY_SERVICES_CLIENT_ID;\n  const clientSecret = process.env.FIREFLY_SERVICES_CLIENT_SECRET;\n\n  const data = qs.stringify({\n    grant_type: 'client_credentials',\n    client_id: clientId,\n    client_secret: clientSecret,\n    scope: 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis',\n  });\n\n  const config = {\n    method: 'post',\n    url: 'https://ims-na1.adobelogin.com/ims/token/v3',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    data: data,\n  };\n\n  try {\n    const response = await axios(config);\n    console.log('Access Token Retrieved');\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error retrieving access token:', error.response?.data || error.message);\n  }\n}\n\nasync function removeBackground(accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    input: {\n      href: SIGNED_PRODUCT_URL,\n      storage: STORAGE,\n    },\n    output: {\n      href: SIGNED_GET_POST_URL,\n      storage: STORAGE,\n    },\n  };\n\n  const config = {\n    method: 'post',\n    url: 'https://image.adobe.io/sensei/cutout',\n    headers: headers,\n    data: data,\n  };\n\n  try {\n    const response = await axios(config);\n    console.log('Remove Background Job Submitted:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during removeBackground:', error.response?.data || error.message);\n  }\n}\n\nasync function checkPhotoshopJobStatus(jobId, accessToken) {\n  const headers = {\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const url = `https://image.adobe.io/sensei/status/${jobId}`;\n\n  let status = 'submitted';\n  while (status !== 'succeeded' && status !== 'failed') {\n    await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait for 5 seconds\n    const response = await axios.get(url, { headers: headers });\n    status = response.data.status;\n    console.log(`Photoshop Job Status: ${status}`);\n  }\n\n  if (status === 'succeeded') {\n    console.log('Background removal completed successfully!');\n  } else {\n    console.error('Background removal failed.');\n  }\n}\n\nasync function generateObjectComposite(accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    prompt: 'A delicious fiery background', // Replace with your actual prompt\n    contentClass: 'photo',\n    image: {\n      source: {\n        url: SIGNED_GET_POST_URL,\n      },\n    },\n    placement: {\n      alignment: {\n        horizontal: 'center',\n        vertical: 'center',\n      },\n    },\n    style: {\n      imageReference: {\n        source: {\n          url: SIGNED_STYLE_REF_URL,\n        },\n      },\n      strength: 50,\n    },\n  };\n\n  const config = {\n    method: 'post',\n    url: 'https://firefly-api.adobe.io/v3/images/generate-object-composite-async',\n    headers: headers,\n    data: data,\n  };\n\n  try {\n    const response = await axios(config);\n    console.log('Generate Object Composite Job Submitted:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during generateObjectComposite:', error.response?.data || error.message);\n  }\n}\n\nasync function checkFireflyJobStatus(jobId, accessToken) {\n  const headers = {\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const url = `https://firefly-api.adobe.io/v3/status/${jobId}`;\n\n  let status = 'pending';\n  let imageUrl = null;\n  while (status !== 'succeeded' && status !== 'failed' && status !== 'cancelled') {\n    await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait for 5 seconds\n    const response = await axios.get(url, { headers: headers });\n    status = response.data.status;\n    console.log(`Firefly Job Status: ${status}`);\n  }\n\n  if (status === 'succeeded') {\n    console.log('Object composite generation completed successfully!');\n    imageUrl = response.data.result.outputs[0].image.url;\n    console.log(`You can access the image at: ${imageUrl}`);\n    return imageUrl;\n  } else {\n    console.error('Object composite generation failed.');\n  }\n}\n\nasync function autoTone(accessToken, signedInputUrl) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    inputs: {\n      href: signedInputUrl,\n      storage: 'external',\n    },\n    outputs: [\n      {\n        href: SIGNED_GET_POST_URL,\n        storage: STORAGE,\n        type: 'image/jpeg',\n      },\n    ],\n  };\n\n  const config = {\n    method: 'post',\n    url: 'https://image.adobe.io/lrService/autoTone',\n    headers: headers,\n    data: data,\n  };\n\n  try {\n    const response = await axios(config);\n    console.log('Auto Tone Job Submitted:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error during autoTone:', error.response?.data || error.message);\n  }\n}\n\nasync function checkLightroomJobStatus(jobId, accessToken) {\n  const headers = {\n    'x-api-key': process.env.FIREFLY_SERVICES_CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const url = `https://image.adobe.io/lrService/status/${jobId}`;\n\n  let status = 'pending';\n  while (status !== 'succeeded' && status !== 'failed') {\n    await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait for 5 seconds\n    const response = await axios.get(url, { headers: headers });\n    const outputs = response.data.outputs || [];\n    if (outputs.length > 0) {\n      status = outputs[0].status;\n    }\n    console.log(`Lightroom Job Status: ${status}`);\n  }\n\n  if (status === 'succeeded') {\n    console.log('Auto tone completed successfully!');\n    console.log('You can access the image at your SIGNED_GET_POST_URL.');\n  } else {\n    console.error('Auto tone failed.');\n  }\n}\n\nfunction extractJobId(response) {\n  const href = response._links.self.href;\n  return href.split('/').pop();\n}\n")),(0,o.mdx)("h2",{id:"deepen-your-understanding"},"Deepen Your Understanding"),(0,o.mdx)("p",null,"Dive deeper into Firefly Services by exploring our ",(0,o.mdx)("a",{parentName:"p",href:"../../firefly-api/guides/how-tos/firefly-generate-image-api-tutorial.md"},"Firefly API tutorials"),"."))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-quickstart-index-md-0aaf4993ff82f63a252c.js.map