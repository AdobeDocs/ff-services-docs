{"version":3,"file":"component---src-pages-firefly-api-guides-how-tos-create-your-first-ff-application-md-682a5cccd6cc7758cea8.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/firefly-api/guides/how-tos/create-your-first-ff-application.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-your-first-firefly-api-implementation\"\n    }}>{`Create your first Firefly API implementation`}</h1>\n    <p>{`A step-by-step guide to creating your first implementation of the Firefly API.`}</p>\n    <p>{`The Adobe Firefly API offers a seamless way to integrate powerful creative workflows into your applications using a simple REST-based API. In this tutorial, we'll guide you through creating your first implementation of the Firefly API.`}</p>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This tutorial provides code snippets in both `}<inlineCode parentName=\"p\">{`Node.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Python`}</inlineCode>{` for your convenience. Feel free to use the language of your choice to complete the implementation of your first Firefly API.`}</p>\n    <p>{`Let's get started!`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Before we begin, make sure you have the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Firefly API credentials. If you don't have them yet, first visit the Firefly Services `}<a parentName=\"li\" {...{\n          \"href\": \"../../../guides/get-started.md\"\n        }}>{`Getting Started`}</a>{` guide to obtain a `}<inlineCode parentName=\"li\">{`client_id`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`client_secret`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Node.js`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`Python`}</inlineCode>{` installed on your machine and basic familiarity with `}<inlineCode parentName=\"li\">{`JavaScript`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`Python`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"step-1-set-up-your-environment\"\n    }}>{`Step 1: Set Up Your Environment`}</h2>\n    <p>{`Begin by creating a new script, named `}<inlineCode parentName=\"p\">{`firefly.js`}</inlineCode>{` (or `}<inlineCode parentName=\"p\">{`firefly.py`}</inlineCode>{`), and save it anywhere on your computer., and save it anywhere on your computer. This will be the script we use to test our integration with Firefly API endpoints.`}</p>\n    <p>{`Next, set your `}<inlineCode parentName=\"p\">{`client_id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`client_secret`}</inlineCode>{` as environment variables. For example, on a Mac or in Windows Subsystem for Linux (WSL), you can do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export CLIENT_ID=YOURIDHERE\nexport CLIENT_SECRET=YOURSECRETHERE\n`}</code></pre>\n    <p>{`Note that our code is going to assume CLIENT_ID and CLIENT_SECRET - case matters!`}</p>\n    <h2 {...{\n      \"id\": \"step-2-authentication\"\n    }}>{`Step 2: Authentication`}</h2>\n    <p>{`Let's begin by initializing a few variables. As previously mentioned, it is crucial to set up two environment variables, as the following code relies on them:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* Set our creds based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-1\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`#Set our creds based on environment variables.\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n`}</code></pre>\n    <p>{`To authenticate, we take these two variables and make a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request to our authentication endpoint: `}<inlineCode parentName=\"p\">{`https://ims-na1.adobelogin.com/ims/token/v3`}</inlineCode>{`. You need to pass your credentials along with the requested scopes that allow for access to Firefly. We can wrap up the entire thing in one simple function:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-2\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-3\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def getAccessToken(id, secret):\n    response = requests.post(f\"https://ims-na1.adobelogin.com/ims/token/v3?client_id={id}&client_secret={secret}&grant_type=client_credentials&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis\")\n    return response.json()[\"access_token\"]\n\ntoken = getAccessToken(CLIENT_ID, CLIENT_SECRET)\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The provided code example does not include error handling for credentials. For production code, it's essential to implement proper error handling to ensure the security and reliability of your application.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-generate-an-image-with-a-prompt\"\n    }}>{`Step 3: Generate an Image with a Prompt`}</h2>\n    <p>{`For our demo, we will use Firefly to generate four images from a single prompt.`}</p>\n    <p>{`In this case, we will focus on the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/index.md\"\n      }}>{`Text to image`}</a>{` functionality, which includes optional reference matching.`}</p>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/index.md\"\n      }}>{`Text to image`}</a>{` with optional reference match section in the API Reference for more details.`}</p>\n    <p>{`Based on the docs, we can see that the only required parameter is prompt. Also, the `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{` prompt specifies how many images we want. So the simplest request body we could build would look like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n    \"prompt\":\"a cat dancing on a rainbow\",\n    \"n\":4\n}\n`}</code></pre>\n    <p>{`Now, let's create a function to generate an image using a prompt.`}</p>\n    <p>{`First, we'll build a simple function to call the REST endpoint.\nIt requires our previous `}<inlineCode parentName=\"p\">{`client_id`}</inlineCode>{` value and the `}<inlineCode parentName=\"p\">{`access_token`}</inlineCode>{`, and our prompt:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-4\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function textToImage(prompt, id, token) {\n\n    let body = {\n        \"n\":4,\n        prompt\n    }\n\n\n    let req = await fetch('https://firefly-api.adobe.io/v2/images/generate', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-5\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def textToImage(text, id, token):\n\n    data = {\n        \"prompt\":text,\n        \"n\":4,\n    }\n\n\n    response = requests.post(\"https://firefly-api.adobe.io/v2/images/generate\", json=data, headers = {\n        \"X-API-Key\":id, \n        \"Authorization\":f\"Bearer {token}\",\n        \"Content-Type\":\"application/json\"\n    }) \n\n    return response.json()\n`}</code></pre>\n    <p>{`Please ensure you include the authentication headers correctly. Pass the token in the Authorization header and the `}<inlineCode parentName=\"p\">{`client ID`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`X-Api-Key`}</inlineCode>{` header. The API will return a JSON string for you to process and return to the caller.`}</p>\n    <h3 {...{\n      \"id\": \"executing-the-firefly-api-call\"\n    }}>{`Executing the Firefly API Call`}</h3>\n    <p>{`We define a simple prompt and call the function to interact with the Firefly API, displaying the result on the screen.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"JavaScript, PYTHON, JSON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-6\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let prompt = 'a cat dancing on a rainbow';\nlet result = await textToImage(prompt, CLIENT_ID, token);\nconsole.log(JSON.stringify(result, null, '\\\\t'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-7\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`prompt = \"a cat dancing on a rainbow\"\nresult = textToImage(prompt, CLIENT_ID, token)\nprint(json.dumps(result, indent=True))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"response\"\n    }}>{`Response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n        \"version\": \"2.10.2\",\n        \"size\": {\n                \"width\": 2048,\n                \"height\": 2048\n        },\n        \"predictedContentClass\": \"art\",\n        \"outputs\": [\n                {\n                        \"seed\": 1003577025,\n                        \"image\": {\n                                \"id\": \"723779df-6388-49b7-81bc-81f735bd2423\",\n                                \"presignedUrl\": \"https://pre-signed-firefly-prod.s3.amazonaws.com/images/723779df-6388-49b7-81bc-81f735bd2423?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDA3TX66LLPDOIWV%2F20240229%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240229T212734Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=4c8cb7c08a954d1990c26308edf13992a479c7da220ae6797252c4f03ad7c39e\"\n                        }\n                },\n                {\n                        \"seed\": 2103068358,\n                        \"image\": {\n                                \"id\": \"ae302228-e6bb-435e-8e49-6db12b9a619b\",\n                                \"presignedUrl\": \"https://pre-signed-firefly-prod.s3.amazonaws.com/images/ae302228-e6bb-435e-8e49-6db12b9a619b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIARDA3TX66LLPDOIWV%2F20240229%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240229T212734Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=c9dccb63e2824b69984b4717204774358ae198d9597d340a712a4563dfe607df\"\n                        }\n                }\n        ]\n}\n`}</code></pre>\n    <p>{`This function sends a POST request to the Firefly API with the prompt and retrieves the generated images. Replace `}<inlineCode parentName=\"p\">{`a cat dancing on a rainbow`}</inlineCode>{` with your desired prompt.`}</p>\n    <p>{`You can copy and paste any of the `}<inlineCode parentName=\"p\">{`presignedUrl`}</inlineCode>{` values from the result to view the images.`}</p>\n    <h2 {...{\n      \"id\": \"step-4-downloading-images-from-firefly-api\"\n    }}>{`Step 4: Downloading Images from Firefly API`}</h2>\n    <p>{`Let's see how you can write a quick utility to download these images.`}</p>\n    <h3 {...{\n      \"id\": \"import-the-required-modules\"\n    }}>{`Import the Required Modules`}</h3>\n    <p>{`First, import the necessary file-related modules and the requests module for Python:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-8\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-9\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import requests \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"define-the-downloadfile-function\"\n    }}>{`Define the `}<inlineCode parentName=\"h3\">{`downloadFile`}</inlineCode>{` function`}</h3>\n    <p>{`Create a function that takes a URL and a file path as arguments, and downloads the file from the URL to the specified path (This step is only required for Node.js).`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-10\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-11\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def downloadFile(url, filePath):\n    with open(filePath,'wb') as output:\n        bits = requests.get(url, stream=True).content\n        output.write(bits)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"iterate-over-the-results-and-save-each-image\"\n    }}>{`Iterate over the results and save each image`}</h3>\n    <p>{`Finally, iterate over the results (assuming result contains the response from the API call) and save each image with a unique file name using the seed value from the result:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-12\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`for(let output of result.outputs) {\n    let fileName = \\`./\\${output.seed}.jpg\\`;\n    await downloadFile(output.image.presignedUrl, fileName);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-13\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`for output in result[\"outputs\"]:\n    fileName = f'./{output[\"seed\"]}.jpg';\n    downloadFile(output[\"image\"][\"presignedUrl\"], fileName);\n`}</code></pre>\n    <p>{`After running these steps, you'll see four images output in the same directory.`}</p>\n    <p><strong parentName=\"p\">{`Sample output`}</strong></p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"607px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"90.9375%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/5530d/firefly-sample.webp 320w\", \"/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/f1b45/firefly-sample.webp 607w\"],\n            \"sizes\": \"(max-width: 607px) 100vw, 607px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/dd4a7/firefly-sample.png 320w\", \"/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/f521d/firefly-sample.png 607w\"],\n            \"sizes\": \"(max-width: 607px) 100vw, 607px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/d6a5626bfa838975f0b330bfe004b22e/f521d/firefly-sample.png\",\n            \"alt\": \"a cat dancing on a rainbow\",\n            \"title\": \"a cat dancing on a rainbow\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"complete-code\"\n    }}>{`Complete Code`}</h2>\n    <p>{`Here's the entire code sample. As a reminder, feel free to modify and change the prompt.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"title, text\" mdxType=\"InlineAlert\" />\n    <p>{`IMPORTANT`}</p>\n    <p>{`Note that this Node.js code uses imports and top-level `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{`, so you must either use the `}<inlineCode parentName=\"p\">{`.mjs`}</inlineCode>{` extension on your script file or ensure you have a `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`type: \"module\"`}</inlineCode>{`.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-14\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n\n/*\nSet our creds based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n\n\nasync function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n\nasync function textToImage(prompt, id, token) {\n\n    let body = {\n        \"n\":4,\n        prompt\n    }\n\n\n    let req = await fetch('https://firefly-api.adobe.io/v2/images/generate', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n\nlet prompt = 'a cat dancing on a rainbow';\nlet result = await textToImage(prompt, CLIENT_ID, token);\nconsole.log(JSON.stringify(result,null,'\\\\t'));\n\nasync function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n\nfor(let output of result.outputs) {\n    let fileName = \\`./\\${output.seed}.jpg\\`;\n    await downloadFile(output.image.presignedUrl, fileName);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-15\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os \nimport requests \nimport json \n\n#Set our creds based on environment variables.\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n\ndef getAccessToken(id, secret):\n    response = requests.post(f\"https://ims-na1.adobelogin.com/ims/token/v3?client_id={id}&client_secret={secret}&grant_type=client_credentials&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis\")\n    return response.json()[\"access_token\"]\n\ntoken = getAccessToken(CLIENT_ID, CLIENT_SECRET)\n\ndef textToImage(text, id, token):\n\n    data = {\n        \"prompt\":text,\n        \"n\":4,\n    }\n\n\n    response = requests.post(\"https://firefly-api.adobe.io/v2/images/generate\", json=data, headers = {\n        \"X-API-Key\":id, \n        \"Authorization\":f\"Bearer {token}\",\n        \"Content-Type\":\"application/json\"\n    }) \n\n    return response.json()\n\n\nprompt = \"a cat dancing on a rainbow\"\nresult = textToImage(prompt, CLIENT_ID, token)\nprint(json.dumps(result, indent=True))\n\ndef downloadFile(url, filePath):\n    with open(filePath,'wb') as output:\n        bits = requests.get(url, stream=True).content\n        output.write(bits)\n\nfor output in result[\"outputs\"]:\n    fileName = f'./{output[\"seed\"]}.jpg';\n    downloadFile(output[\"image\"][\"presignedUrl\"], fileName);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","slots","parentName","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}