{
    "openapi": "3.1.0",
  "info": {
      "version": "V3",
      "title": "Firefly API",
      "description": "REST API for Adobe Firefly for enterprise usage"
  },
  "servers": [
      {
          "url": "https://firefly-api.adobe.io"
      }
  ],
  "security": [
    {
        "X-Api-Key": [],
        "AccessToken": []
    }
],
"paths": {
    "/v3/images/generate-similar": {
        "post": {
            "summary": "Generate Similar Images - Model 3",
            "operationId": "generateSimilarImages",
            "description": "Generate similar images based on a reference image that you provide as a parameter.",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenerateSimilarImagesRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Successful Response",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GenerateSimilarImagesResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "bad_request": {
                        "value": {
                          "error_code": "bad_request"
                        }
                      }
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "access_error": {
                        "value": {
                          "error_code": "access_error"
                        }
                      }
                    }
                  }
                }
              },
              "408": {
                "description": "Request Timeout",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "timeout_error": {
                        "value": {
                          "error_code": "timeout_error"
                        }
                      }
                    }
                  }
                }
              },
              "415": {
                "description": "Unsupported Media Type",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "invalid_content_type": {
                        "value": {
                          "error_code": "invalid_content_type"
                        }
                      }
                    }
                  }
                }
              },
              "422": {
                "description": "Unprocessable Entity",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "validation_error": {
                        "value": {
                          "error_code": "validation_error",
                          "validation_errors": [
                            {
                              "loc": [
                                "body",
                                "contentClass"
                              ],
                              "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                              "type": "type_error.enum",
                              "ctx": {
                                "enum_values": [
                                  "photo",
                                  "art"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "prompt_unsafe": {
                        "value": {
                          "error_code": "prompt_unsafe"
                        }
                      },
                      "input_media_unsafe": {
                        "value": {
                          "error_code": "input_media_unsafe"
                        }
                      },
                      "output_media_unsafe": {
                        "value": {
                          "error_code": "output_media_unsafe"
                        }
                      },
                      "language_not_supported": {
                        "value": {
                          "error_code": "language_not_supported"
                        }
                      }
                    }
                  }
                }
              },
              "429": {
                "description": "Too Many Requests",
                "headers": {
                  "retry-after": {
                    "description": "Indicates the time after which the client should retry the request.",
                    "schema": { "type": "string" }
                  },
                  "x-access-rate-limit-level": {
                    "description": "Indicates the level at which the rate limit was applied. Possible values are:\n- org_level: The rate limit was applied at the account level\n- project_level: The rate limit was applied at the project level",
                    "schema": { "type": "string" }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "example": {
                      "message": "Too many requests. Please try again later.",
                      "error_code": "rate_limited"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "runtime_error": {
                        "value": {
                          "error_code": "runtime_error"
                        }
                      }
                    }
                  }
                }
              },
              "501": {
                "description": "Not Implemented",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "not_implemented": {
                        "value": {
                          "error_code": "not_implemented"
                        }
                      }
                    }
                  }
                }
              },
              "503": {
                "description": "Service Unavailable",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "model_not_loaded": {
                        "value": {
                          "error_code": "model_not_loaded"
                        }
                      }
                    }
                  }
                }
              }
            }
        }
    }
},
"components": {
    "securitySchemes": {
      "AccessToken": {
          "type": "http",
          "scheme": "bearer"
      },
      "X-Api-Key": {
          "type": "apiKey",
          "name": "x-api-key",
          "in": "header"
      }
  },
      "schemas": {
        "ApiError": {
            "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Associated error code"
                    }
                  },
            "type": "object",
            "required": [
              "error_code"
            ],
            "title": "ApiError",
            "description": "The error within the error response."
          },
          "BaseInputImage": {
            "properties": {
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicBinaryInput"
                  }
                ],
                "title": "Source image",
                "description": "Source of the reference image used to generate similar images. You can either use a <code>url</code> or an <code>uploadId</code> as the source for the uploaded image.  \n  <strong>Note</strong>: Only allow listed domains are allowed to be accepted as input URL in the request. The allow-listed domains are as follows:  \n  <ul><li><code>amazonaws.com</code></li><li><code>windows.net</code></li><li><code>dropboxusercontent.com</code></li></ul>"
              }
            },
            "type": "object",
            "required": [
              "source"
            ],
            "title": "BaseInputImage"
          },
          "ContentClass": {
            "type": "string",
            "enum": [
              "photo",
              "art"
            ],
            "title": "ContentClass",
            "description": "The content class guides the overall image theme and styles can be applied on top of each content type. If no content type is specified, it is auto-detected. \n | Value | Description\n |:---------- |:------\n | photo | Photorealistic style\n | art | Artistic style\n"
          },
          "GenerateSimilarImagesRequest": {
            "properties": {
              "numVariations": {
                "type": "integer",
                "maximum": 4,
                "minimum": 1,
                "title": "The number of variations",
                "description": "The number of variations to generate. numVariations will default to the number of seeds, or to 1 if seeds is not specified."
              },
              "seeds": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 4,
                "minItems": 1,
                "uniqueItems": true,
                "default" : [ 0 ],
                "title": "The seed of each variation",
                "description": "Array of seed(s) that ensure consistent image generation across multiple API calls. For example, you can use the same seed to generate a similar image with different styles. If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
              },
              "size": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Size"
                  }
                ],
                "title": "The size",
                "description": "The size of the requested generations. The supported dimensions for image generations are: \n  | Dimensions | Description | \n  | -----------| ----- |\n  | { \"width\": 2048, \"height\": 2048} | Square (1:1) |\n  | { \"width\": 2304, \"height\": 1792 } | Landscape (4:3) |\n  | { \"width\": 1792, \"height\": 2304 } | Portrait (3:4) | \n  | { \"width\": 2688, \"height\": 1536 } | Widescreen (16:9) |  \n  | { \"width\": 1344, \"height\": 768 } |(7:4) |  \n  |{ \"width\": 1152, \"height\": 896 } |(9:7) |  \n  |{ \"width\": 896, \"height\": 1152 } |(7:9) |  \n  | { \"width\": 1024, \"height\": 1024} | Square (1:1) |",
                "default": {
                  "width": 2048,
                  "height": 2048
                }
              },
              "image": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BaseInputImage"
                  }
                ],
                "title": "Reference image",
                "description": "Firefly will generate similar variations based on the reference input image. Supported formats are, image/jpeg, image/png, image/webp. "
              },
              "tileable": {
                "type": "boolean",
                "title": "Output image tileability",
                "description": "An image is tileable if it can be repeated infinitely in any direction without showing visible seams or edges.",
                "default": false          
              }
            },
            "type": "object",
            "required": [
              "image"
            ],
            "title": "Generating similar images from a reference image"
          },
          "GenerateSimilarImagesResponse": {
            "properties": {
              "size": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Size"
                  }
                ],
                "title": "The actual size used for the outputs",
                "description": "If size was passed as input, this value should be the same as the one passed as input."
              },
              "outputs": {
                "items": {
                  "$ref": "#/components/schemas/OutputImage"
                },
                "type": "array",
                "minItems": 1,
                "title": "The list of images",
                "description": "Each image will have a storage item."
              }
            },
            "type": "object",
            "required": [
              "size",
              "outputs"
            ],
            "title": "Generating similar images response"
          },
          "PublicBinaryInput": {
            "properties": {
                "url": {
                    "type": "string",
                    "maxLength": 2083,
                    "minLength": 1,
                    "format": "uri",
                    "title": "The presigned url",
                    "description": "This URL of an uploaded image."
                },
                "uploadId": {
                    "type": "string",
                    "format": "uuid4",
                    "title": "UUID of the uploaded object",
                    "description": "UUID of the uploaded object"
                }
            },
            "type": "object",
            "title": "PublicBinaryInput",
            "description": " You can either use a <code>url</code> or an <code>uploadId</code> as the source for the uploaded image."
          },
        "PublicBinaryOutput": {
          "properties": {
              "url": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri",
                  "title": "The presigned url",
                  "description": "The reference to signed url of the image."
              }
          },
          "type": "object",
          "title": "PublicBinaryOutput"
      },
          "OutputImage": {
              "properties": {
                  "seed": {
                      "type": "integer",
                      "title": "The seed used for the generation",
                      "description": "Identifier used to customize image generation processes."
                  },
                  "image": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PublicBinaryOutput"
                          }
                      ],
                      "description": "A valid storage item containing a pre-signed URL. The pre-signed URL will expire in one hour. The output format will be <code>image/jpeg</code>."
                  }
              },
              "type": "object",
              "required": ["seed", "image"],
              "title": "OutputImage"
          },
          "Size": {
              "properties": {
                  "width": {
                      "type": "integer",
                      "maximum": 2688,
                      "minimum": 1,
                      "title": "The desired width of the output image."
                  },
                  "height": {
                      "type": "integer",
                      "maximum": 2688,
                      "minimum": 1,
                      "title": "The desired height of the output image."
                  }
              },
              "type": "object",
              "required": ["width", "height"],
              "title": "Size"
          }
        }
      }
}