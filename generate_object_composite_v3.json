{
    "openapi": "3.1.0",
    "info": {
        "version": "V3",
        "title": "Firefly API",
        "description": "REST API for Adobe Firefly for enterprise usage"
    },
    "servers": [
        {
            "url": "https://firefly-api.adobe.io"
        }
    ],
    "security": [
      {
          "X-Api-Key": [],
          "AccessToken": []
      }
  ],
  "paths": {
    "/v3/images/generate-object-composite": {
        "post": {
            "summary": "Generate Object Composite - Model 3",
            "operationId": "generateObjectComposite",
            "description": "Combines your image and images generated by Firefly to create an image composite, or scene. The images that Firefly generates are based on a text prompt that you provide. You can upload an image with or without an image mask, such as a product photo.",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GenerateObjectCompositeRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "Successful Response",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GenerateObjectCompositeResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "Bad Request",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "bad_request": {
                        "value": {
                          "error_code": "bad_request"
                        }
                      }
                    }
                  }
                }
              },
              "403": {
                "description": "Forbidden",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "access_error": {
                        "value": {
                          "error_code": "access_error"
                        }
                      }
                    }
                  }
                }
              },
              "408": {
                "description": "Request Timeout",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "timeout_error": {
                        "value": {
                          "error_code": "timeout_error"
                        }
                      }
                    }
                  }
                }
              },
              "415": {
                "description": "Unsupported Media Type",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "invalid_content_type": {
                        "value": {
                          "error_code": "invalid_content_type"
                        }
                      }
                    }
                  }
                }
              },
              "422": {
                "description": "Unprocessable Entity",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "validation_error": {
                        "value": {
                          "error_code": "validation_error",
                          "validation_errors": [
                            {
                              "loc": [
                                "body",
                                "contentClass"
                              ],
                              "msg": "value is not a valid enumeration member; permitted: 'photo', 'art'",
                              "type": "type_error.enum",
                              "ctx": {
                                "enum_values": [
                                  "photo",
                                  "art"
                                ]
                              }
                            }
                          ]
                        }
                      },
                      "prompt_unsafe": {
                        "value": {
                          "error_code": "prompt_unsafe"
                        }
                      },
                      "input_media_unsafe": {
                        "value": {
                          "error_code": "input_media_unsafe"
                        }
                      },
                      "output_media_unsafe": {
                        "value": {
                          "error_code": "output_media_unsafe"
                        }
                      },
                      "language_not_supported": {
                        "value": {
                          "error_code": "language_not_supported"
                        }
                      }
                    }
                  }
                }
              },
              "429": {
                "description": "Too Many Requests",
                "headers": {
                  "retry-after": {
                    "description": "Indicates the time after which the client should retry the request.",
                    "schema": { "type": "string" }
                  },
                  "x-access-rate-limit-level": {
                    "description": "Indicates the level at which the rate limit was applied. Possible values are:\n- org_level: The rate limit was applied at the account level\n- project_level: The rate limit was applied at the project level",
                    "schema": { "type": "string" }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "example": {
                       "message": "Too many requests. Please try again later.",
                      "error_code": "rate_limited"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "runtime_error": {
                        "value": {
                          "error_code": "runtime_error"
                        }
                      }
                    }
                  }
                }
              },
              "501": {
                "description": "Not Implemented",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "not_implemented": {
                        "value": {
                          "error_code": "not_implemented"
                        }
                      }
                    }
                  }
                }
              },
              "503": {
                "description": "Service Unavailable",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ApiError"
                    },
                    "examples": {
                      "model_not_loaded": {
                        "value": {
                          "error_code": "model_not_loaded"
                        }
                      }
                    }
                  }
                }
              }
            }
        }
    }
  },
  "components": {
    "securitySchemes": {
      "AccessToken": {
          "type": "http",
          "scheme": "bearer"
      },
      "X-Api-Key": {
          "type": "apiKey",
          "name": "x-api-key",
          "in": "header"
      }
  },
      "schemas": {
        "AlignmentHorizontal": {
          "enum": [
            "center",
            "left",
            "right"
          ],
          "title": "AlignmentHorizontal",
          "description": "Specifies the horizontal anchoring of the image within the available space."
        },
        "AlignmentVertical": {
          "enum": [
            "center",
            "top",
            "bottom"
          ],
          "title": "AlignmentVertical",
          "description": "Specifies the vertical anchoring of the image within the available space."
        },
        "ApiError": {
            "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    },
                    "error_code": {
                      "type": "string",
                      "description": "Associated error code"
                    }
                  },
            "type": "object",
            "required": [
              "error_code"
            ],
            "title": "ApiError",
            "description": "The error within the error response."
          },
          "ContentClass": {
            "type": "string",
            "enum": [
              "photo",
              "art"
            ],
            "title": "ContentClass",
            "description": "The content class guides the overall image theme and styles can be applied on top of each content type. If no content type is specified, it is auto-detected. \n | Value | Description\n |:---------- |:------\n | photo | Photorealistic style\n | art | Artistic style\n"
          },
          "GenerateObjectCompositeRequest": {
            "properties": {
              "numVariations": {
                "type": "integer",
                "maximum": 4,
                "minimum": 1,
                "title": "The number of variations",
                "description": "The number of variations to generate. numVariations will default to the number of seeds, or to 1 if seeds is not specified."
              },
              "seeds": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "maxItems": 4,
                "minItems": 1,
                "uniqueItems": true,
                "default" : [ 0 ],
                "title": "The seed of each variation",
                "description": "Array of seed(s) that ensure consistent image generation across multiple API calls. For example, you can use the same seed to generate a similar image with different styles. If specified alongside with numVariations, the number of seeds must be the equal to numVariations"
              },
              "size": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Size"
                  }
                ],
                "title": "The size",
                "description": "The size of the requested generations. The supported dimensions for image generations are: \n  | Dimensions | Description | \n  | -----------| ----- |\n  | { \"width\": 2048, \"height\": 2048} | Square (1:1) |\n  | { \"width\": 2304, \"height\": 1792 } | Landscape (4:3) |\n  | { \"width\": 1792, \"height\": 2304 } | Portrait (3:4) | \n  | { \"width\": 2688, \"height\": 1536 } | Widescreen (16:9) |  \n  | { \"width\": 1344, \"height\": 768 } |(7:4) |  \n  |{ \"width\": 1152, \"height\": 896 } |(9:7) |  \n  |{ \"width\": 896, \"height\": 1152 } |(7:9) |  \n  | { \"width\": 1024, \"height\": 1024} | Square (1:1) |",
                "default": {
                  "width": 2048,
                  "height": 2048
                }
              },
              "image": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ObjectCompositeInputImage"
                  }
                ],
                "title": "Input Image",
                "description": "An image of an object that needs to be rendered on a scene. You can either use a <code>url</code> or an <code>uploadId</code> as the source for the uploaded image. Supported formats are, image/jpeg, image/png, image/webp.  \n  <strong>Note</strong>: Only allow listed domains are allowed to be accepted as input URL in the request. The allow-listed domains are as follows:  \n  <ul><li><code>amazonaws.com</code></li><li><code>windows.net</code></li><li><code>dropboxusercontent.com</code></li></ul>"
              },
              "prompt": {
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "title": "The prompt",
                "description": "The prompt used to generate the image. The longer the prompt - the better"
              },
              "placement": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Placement"
                  }
                ],
                "title": "Object placement",
                "description": "Specifies how the image will be positioned and sized in the final generation. You can specify both inset and alignment, only inset, only alignment or none of them."
              },
              "style": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Styles"
                    }
                ],
                "title": "Style Reference",
                "description": "You can specify a preset, a reference image or both"
            },
            "contentClass": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ContentClass"
                    }
                ],
                "title": "The content class",
                "description": "Will guide the generation to being more photographic or more like art"
            }
            },
            "type": "object",
            "required": [
              "image",
              "prompt"
            ],
            "title": "Generate object composite from prompt request"
          },
          "GenerateObjectCompositeResponse": {
            "properties": {
              "size": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Size"
                  }
                ],
                "title": "The actual size used for the outputs",
                "description": "If size was passed as input, this value should be the same as the one passed as input."
              },
              "outputs": {
                "items": {
                  "$ref": "#/components/schemas/OutputImage"
                },
                "type": "array",
                "minItems": 1,
                "title": "The list of images",
                "description": "Each image will have a storage item."
              },
              "contentClass": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContentClass"
                  }
                ],
                "title": "The detected content class",
                "description": "Will be same as input, if input was specified"
              }
            },
            "type": "object",
            "required": [
              "size",
              "outputs"
            ],
            "title": "Generate object composite from prompt response"
          },
          "ObjectCompositeInputImage": {
            "properties": {
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PublicBinaryInput"
                  }
                ],
                "title": "Source image",
                "description": "An image of an object that needs to be rendered on a scene."
              },
              "mask": {
                "allOf": [
                  {
                      "$ref": "#/components/schemas/PublicBinaryInput"
                  }
              ],
                "title": "Mask image",
                "description": "Provide a mask that hides part of the object like the background."
              }
            },
            "type": "object",
            "required": [
              "source"
            ],
            "title": "ObjectCompositeInputImage"
          },
          "PublicBinaryInput": {
            "properties": {
                "url": {
                    "type": "string",
                    "maxLength": 2083,
                    "minLength": 1,
                    "format": "uri",
                    "title": "The presigned url",
                    "description": "This URL of an uploaded image."
                },
                "uploadId": {
                    "type": "string",
                    "format": "uuid4",
                    "title": "UUID of the uploaded object",
                    "description": "UUID of the uploaded objec. Generate this ID using the upload API."
                }
            },
            "type": "object",
            "title": "PublicBinaryInput",
            "description": " You can either use a <code>url</code> or an <code>uploadId</code> as the source for the uploaded image."
          },
        "PublicBinaryOutput": {
          "properties": {
              "url": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri",
                  "title": "The presigned url",
                  "description": "The reference to signed url of the image."
              }
          },
          "type": "object",
          "title": "PublicBinaryOutput"
      },
          "OutputImage": {
              "properties": {
                  "seed": {
                      "type": "integer",
                      "title": "The seed used for the generation",
                      "description": "Identifier used to customize image generation processes."
                  },
                  "image": {
                      "allOf": [
                          {
                              "$ref": "#/components/schemas/PublicBinaryOutput"
                          }
                      ],
                      "description": "A valid storage item containing a pre-signed URL. The pre-signed URL will expire in one hour. The output format will be <code>image/jpeg</code>."
                  }
              },
              "type": "object",
              "required": ["seed", "image"],
              "title": "OutputImage"
          },
          "Placement": {
            "properties": {
              "inset": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PlacementInset"
                  }
                ],
                "title": "Margin values in target size",
                "description": "Defines the inward displacement applied to the image's edges. This parameter specifies the distance by which each edge of the image will be pushed inward, thereby reducing the visible area by the specified amount on all sides."
              },
              "alignment": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PlacementAlignment"
                  }
                ],
                "title": "Alignment",
                "description": "Specifies how the image will be anchored within the available space for each direction. For horizontal, (0,1,2)=(center, left, right). For vertical, (0,1,2)=(center, top, bottom)."
              }
            },
            "type": "object",
            "title": "Placement"
          },
          "PlacementAlignment": {
            "properties": {
              "horizontal": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlignmentHorizontal"
                  }
                ],
                "default": "center"
              },
              "vertical": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AlignmentVertical"
                  }
                ],
                "default": "center"
              }
            },
            "type": "object",
            "title": "PlacementAlignment"
          },
          "PlacementInset": {
            "properties": {
              "left": {
                "type": "integer",
                "title": "Left Inset",
                "description": "The space between left edge of the result image and left edge of the placed object image."
              },
              "top": {
                "type": "integer",
                "title": "Top Inset",
                "description": "The space between top edge of the result image and top edge of the placed object image."
              },
              "right": {
                "type": "integer",
                "title": "Right Inset",
                "description": "The space between right edge of the result image and right edge of the placed object image."
              },
              "bottom": {
                "type": "integer",
                "title": "Bottom Inset",
                "description": "The space between bottom edge of the result image and bottom edge of the placed object image."
              }
            },
            "type": "object",
            "title": "PlacementInset"
          },
          "Size": {
              "properties": {
                  "width": {
                      "type": "integer",
                      "maximum": 2688,
                      "minimum": 1,
                      "title": "The desired width of the output image."
                  },
                  "height": {
                      "type": "integer",
                      "maximum": 2688,
                      "minimum": 1,
                      "title": "The desired height of the output image."
                  }
              },
              "type": "object",
              "required": ["width", "height"],
              "title": "Size"
          },
        "StylesImageReference": {
            "properties": {
                "source": {
                    "$ref": "#/components/schemas/PublicBinaryInput"
                }
            },
            "type": "object",
            "title": "StylesImageReference"
        },
          "Styles": {
              "properties": {
                  "presets": {
                      "items": {
                          "type": "string"
                      },
                      "type": "array",
                      "uniqueItems": true,
                      "title": "The style presets",
                      "description": "You can specify a preset ID for a style. Refer to Image Model Styles under Concepts for the list of supported <code>Preset IDs</code>. "
                  },
                  "strength": {
                      "type": "integer",
                      "maximum": 100,
                      "exclusiveMinimum": 0,
                      "title": "The strength of the style",
                      "description": "The strength of the style to be applied."
                  },
          "imageReference": {
            "allOf": [
                {
                    "$ref": "#/components/schemas/StylesImageReference"
                }
            ],
            "title": "A style image reference",
            "description": "Firefly will detect the style in the image and apply the same style in the generated image. Supported formats are, image/jpeg, image/png, image/webp.  \n  <strong>Note</strong>: Only allow listed domains are allowed to be accepted as input URL in the request. The allow-listed domains are as follows:  \n  <ul><li><code>amazonaws.com</code></li><li><code>windows.net</code></li><li><code>dropboxusercontent.com</code></li></ul>"
        }
      },
    "type": "object",
    "title": "Styles"
  }
        }
      }
  }