{"version":3,"file":"component---src-pages-firefly-api-guides-how-tos-firefly-services-with-powerautomate-md-400a735086dd97f45a5b.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/firefly-api/guides/how-tos/firefly-services-with-powerautomate.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"integrating-firefly-services-with-microsoft-power-automate\"\n    }}>{`Integrating Firefly Services with Microsoft Power Automate`}</h1>\n    <p>{`Microsoft's `}<a parentName=\"p\" {...{\n        \"href\": \"https://make.powerautomate.com\"\n      }}>{`Power Automate`}</a>{` is a powerful no-code solution that lets developers and non-developers alike create flexible workflows to automate processing using multiple different services. Firefly Services can be employed in the Power Automate platform and in this article, we'll walk you through the process of creating a sample workflow. Keep in mind that Power Automate is incredibly flexible and the example shown here is just one possible use of the platform.`}</p>\n    <InlineAlert slots=\"text\" variant=\"info\" mdxType=\"InlineAlert\" />\n    <p>{`Please note, this tutorial uses the Firefly Image Model 2. For details on using the Firefly Image Model 3 (preview) APIs, please see `}<a parentName=\"p\" {...{\n        \"href\": \"../concepts/model-3-overview.md\"\n      }}>{`this guide`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`To complete this tutorial, you will need:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Firefly API credentials. If you don't have them yet, first visit the Firefly Services `}<a parentName=\"li\" {...{\n          \"href\": \"../../../guides/get-started.md\"\n        }}>{`Getting Started`}</a>{` guide to obtain a `}<inlineCode parentName=\"li\">{`client_id`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`client_secret`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`An account with Microsoft and access to Power Automate. `}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"workflow\"\n    }}>{`Workflow`}</h2>\n    <p>{`Our workflow will use the Firefly API to generate images. The steps involved are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Reading a set of prompts from a Microsoft list.`}</li>\n      <li parentName=\"ul\">{`Sending each prompt to Firefly.`}</li>\n      <li parentName=\"ul\">{`Take the result and send an email.`}</li>\n    </ul>\n    <p>{`For simplicity's sake, this flow will be manually triggered, but certainly, but you could create a dynamically triggered workflow.`}</p>\n    <h2 {...{\n      \"id\": \"step-1-defining-our-prompts\"\n    }}>{`Step 1: Defining our prompts`}</h2>\n    <p>{`As described earlier, we will use Microsoft List to define our prompts. We created a new list, named it `}<em parentName=\"p\">{`Prompts`}</em>{`, and added two simple values in the first column.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"694px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"36.875%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/5530d/shot1.webp 320w\", \"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/0c8fb/shot1.webp 640w\", \"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/a23a1/shot1.webp 694w\"],\n            \"sizes\": \"(max-width: 694px) 100vw, 694px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/dd4a7/shot1.png 320w\", \"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/0f09e/shot1.png 640w\", \"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/91652/shot1.png 694w\"],\n            \"sizes\": \"(max-width: 694px) 100vw, 694px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/55ee63870a458b3de43194916dde0a1e/91652/shot1.png\",\n            \"alt\": \"Microsoft List with two prompts\",\n            \"title\": \"Microsoft List with two prompts\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"step-2-create-the-flow\"\n    }}>{`Step 2: Create the flow`}</h2>\n    <p>{`Next, create a new `}<em parentName=\"p\">{`Instant`}</em>{` Power Automate flow. This will let us test as needed without being tied to any automatic process. Everything demonstrated in this article absolutely `}<em parentName=\"p\">{`could`}</em>{` run in that scenario. `}</p>\n    <h2 {...{\n      \"id\": \"step-3-read-our-list\"\n    }}>{`Step 3: Read our list`}</h2>\n    <p>{`PowerAutomate has steps that automatically integrate with Lists, so the next step will be to add the \"Get items\" action from Sharepoint. This will require you to configure the Sharepoint site hosting and select the list. `}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"624px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"62.18749999999999%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/ea847dd31ff3b800aa4b8efa0ee37d32/5530d/shot2.webp 320w\", \"/ff-services-docs/static/ea847dd31ff3b800aa4b8efa0ee37d32/5f6bc/shot2.webp 624w\"],\n            \"sizes\": \"(max-width: 624px) 100vw, 624px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/ea847dd31ff3b800aa4b8efa0ee37d32/dd4a7/shot2.png 320w\", \"/ff-services-docs/static/ea847dd31ff3b800aa4b8efa0ee37d32/08d47/shot2.png 624w\"],\n            \"sizes\": \"(max-width: 624px) 100vw, 624px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/ea847dd31ff3b800aa4b8efa0ee37d32/08d47/shot2.png\",\n            \"alt\": \"Step configured to read list values\",\n            \"title\": \"Step configured to read list values\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`Note that we've renamed the action to `}<em parentName=\"p\">{`Get Prompts`}</em>{`.`}</p>\n    <h2 {...{\n      \"id\": \"step-4-define-variables\"\n    }}>{`Step 4: Define Variables`}</h2>\n    <p>{`The following two actions are optional but help us out later in the flow. Create two actions to initialize variables. We're going to create two string values to store our Firefly authentication. The first one should use these values:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Name: `}<inlineCode parentName=\"li\">{`FIREFLY_CLIENT_ID`}</inlineCode></li>\n      <li parentName=\"ul\">{`Type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode></li>\n      <li parentName=\"ul\">{`Value: `}<inlineCode parentName=\"li\">{`Your client id`}</inlineCode></li>\n    </ul>\n    <p>{`Name this step, `}<em parentName=\"p\">{`Set Firefly Client ID`}</em>{`.`}</p>\n    <p>{`The next one will use these values:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Name: `}<inlineCode parentName=\"li\">{`FIREFLY_CLIENT_SECRET`}</inlineCode></li>\n      <li parentName=\"ul\">{`Type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode></li>\n      <li parentName=\"ul\">{`Value: `}<inlineCode parentName=\"li\">{`Your client secret`}</inlineCode></li>\n    </ul>\n    <p>{`Name this step, `}<em parentName=\"p\">{`Set Firefly Client Secret`}</em>{`.`}</p>\n    <p>{`At this point, your flow should look like this:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"259px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"177.992277992278%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/ec85be9d4eca2c4aa569b5ee0580b3ec/5a68b/shot3.webp 259w\"],\n            \"sizes\": \"(max-width: 259px) 100vw, 259px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/ec85be9d4eca2c4aa569b5ee0580b3ec/8b5e5/shot3.png 259w\"],\n            \"sizes\": \"(max-width: 259px) 100vw, 259px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/ec85be9d4eca2c4aa569b5ee0580b3ec/8b5e5/shot3.png\",\n            \"alt\": \"The flow, so far\",\n            \"title\": \"The flow, so far\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"step-6-exchange-credentials\"\n    }}>{`Step 6: Exchange Credentials`}</h2>\n    <p>{`The next step will use the HTTP action to exchange our credentials for an access token. Add a new step, HTTP, and use the following URI:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`https://ims-na1.adobelogin.com/ims/token/v3?grant_type=client_credentials&client_id=@{variables('FIREFLY_CLIENT_ID')}&client_secret=@{variables('FIREFLY_CLIENT_SECRET')}&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`As soon as you enter that value, the two `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` section will change to reference the two earlier steps we defined. Set the method to POST and name the action, `}<em parentName=\"p\">{`Get Access Token`}</em>{`.`}</p>\n    <p>{`Follow this with a `}<em parentName=\"p\">{`Parse JSON`}</em>{` step. The content value will point to the body of the previous step. The schema will be the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"type\": \"object\",\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\"\n        },\n        \"token_type\": {\n            \"type\": \"string\"\n        },\n        \"expires_in\": {\n            \"type\": \"integer\"\n        }\n    }\n}\n`}</code></pre>\n    <p>{`This was created by using the \"Use sample payload to generate schema\" support in the step and by passing in a previous authentication result. `}</p>\n    <p>{`The net result of these two steps is to get an access token for Firefly calls and parse the result so Power Automate can make use of it. `}</p>\n    <h2 {...{\n      \"id\": \"step-6-initialize-image-string\"\n    }}>{`Step 6: Initialize Image String`}</h2>\n    <p>{`Before we start using the API, we need to define a variable, `}<em parentName=\"p\">{`images`}</em>{`, that we'll use for our results. Add a new step to initialize a variable with these values:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`name: `}<inlineCode parentName=\"li\">{`images`}</inlineCode></li>\n      <li parentName=\"ul\">{`type: `}<inlineCode parentName=\"li\">{`String`}</inlineCode></li>\n      <li parentName=\"ul\">{`value: `}<inlineCode parentName=\"li\">{`Leave blank`}</inlineCode></li>\n    </ul>\n    <p>{`Name this step, \"Initialize Image String\".`}</p>\n    <p>{`At this point, your flow should look like this:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"256px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"303.90625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/60d71e9bccfb1a394a173bd8e42212d0/4fae8/shot4.webp 256w\"],\n            \"sizes\": \"(max-width: 256px) 100vw, 256px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/60d71e9bccfb1a394a173bd8e42212d0/e3135/shot4.png 256w\"],\n            \"sizes\": \"(max-width: 256px) 100vw, 256px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/60d71e9bccfb1a394a173bd8e42212d0/e3135/shot4.png\",\n            \"alt\": \"The flow, so far\",\n            \"title\": \"The flow, so far\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"step-7-beginning-the-loop\"\n    }}>{`Step 7: Beginning the Loop`}</h2>\n    <p>{`OOur workflow will generate results for each prompt and email them, so now we add a new action, `}<em parentName=\"p\">{`Apply to each`}</em>{` (found in the `}<em parentName=\"p\">{`Control`}</em>{` section when adding a new action). You will be prompted to select an output to drive the looping. If you remember, we read in our Microsoft List value in the beginning, so choose that:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"750px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"43.4375%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/5530d/shot5.webp 320w\", \"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/0c8fb/shot5.webp 640w\", \"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/3ea8a/shot5.webp 750w\"],\n            \"sizes\": \"(max-width: 750px) 100vw, 750px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/dd4a7/shot5.png 320w\", \"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/0f09e/shot5.png 640w\", \"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/e9985/shot5.png 750w\"],\n            \"sizes\": \"(max-width: 750px) 100vw, 750px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/49f7c4c096b7890f1be213b363a77d8e/e9985/shot5.png\",\n            \"alt\": \"Defining the loop variable\",\n            \"title\": \"Defining the loop variable\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`All of the next steps will be defined inside this loop. `}</p>\n    <h2 {...{\n      \"id\": \"step-8-resetting-the-images-variable\"\n    }}>{`Step 8: Resetting the Images Variable`}</h2>\n    <p>{`In step six, we created an image variable named `}<inlineCode parentName=\"p\">{`images`}</inlineCode>{`. The point of this variable is to hold the results from Firefly so that it can be emailed. We need to reset this value for each prompt to an empty string. So, the first step inside our `}<em parentName=\"p\">{`Apply to each`}</em>{` loop is a `}<em parentName=\"p\">{`Set the variable value`}</em>{` action. It sets the variable, `}<inlineCode parentName=\"p\">{`images`}</inlineCode>{`, to null. `}</p>\n    <p>{`You can do this by entering: `}<inlineCode parentName=\"p\">{`@{null}`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"step-9-calling-fireflys-generate-images-api\"\n    }}>{`Step 9: Calling Firefly's Generate Images API`}</h2>\n    <p>{`We'll add another HTTP action that will call the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/V2/\"\n      }}>{`Generate Images`}</a>{` API. This API call requires a few parameters, including the prompt and number of desired images if you want more than one. `}</p>\n    <p>{`Begin by setting the URI to the API endpoint, as specified in the documentation: `}<inlineCode parentName=\"p\">{`https://firefly-api.adobe.io/v2/images/generate`}</inlineCode>{`. `}</p>\n    <p>{`Next, set the method to `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{`. `}</p>\n    <p>{`To access the API, two credentials must be sent in the headers. Begin by specifying an `}<inlineCode parentName=\"p\">{`Authorization`}</inlineCode>{` header which will use the access token gotten earlier. This can be used by inputting this value: `}<inlineCode parentName=\"p\">{`Bearer @{body('Parse_JSON')?['access_token']}`}</inlineCode>{`. Next, the header `}<inlineCode parentName=\"p\">{`X-Api-Key`}</inlineCode>{` should be set with the Firefly Client ID specified earlier: `}<inlineCode parentName=\"p\">{`@{variables('FIREFLY_CLIENT_ID')}`}</inlineCode></p>\n    <p>{`The last thing required is the actual body of the request. The number of images and size will be hard coded, with the prompt being dynamic based on the loop value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"n\": 4,\n  \"prompt\": \"@{items('Apply_to_each')?['Title']}\",\n  \"size\": {\n    \"width\": \"1024\",\n    \"height\": \"1024\"\n  }\n}\n`}</code></pre>\n    <p>{`You should follow this step with a Parse JSON action again. Add that step and name it `}<em parentName=\"p\">{`Parse Firefly Result JSON`}</em>{`. Point it to the body of the previous step and use this schema:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"type\": \"object\",\n    \"properties\": {\n        \"version\": {\n            \"type\": \"string\"\n        },\n        \"size\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"width\": {\n                    \"type\": \"integer\"\n                },\n                \"height\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"predictedContentClass\": {\n            \"type\": \"string\"\n        },\n        \"outputs\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"seed\": {\n                        \"type\": \"integer\"\n                    },\n                    \"image\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"id\": {\n                                \"type\": \"string\"\n                            },\n                            \"presignedUrl\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                },\n                \"required\": [\n                    \"seed\",\n                    \"image\"\n                ]\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`As before, the net result of these two steps is to make an HTTP call and parse the result into usable data. `}</p>\n    <h2 {...{\n      \"id\": \"step-10-defining-image-html\"\n    }}>{`Step 10: Defining Image HTML`}</h2>\n    <p>{`The next step will be twofold. We want to create a string variable for email that will include all the results from the Firefly call, but we want to define this in HTML. To do this, create another \"Apply to each\" step. This will use the output from the previous step that parsed the JSON result of the Firefly call: `}<inlineCode parentName=\"p\">{`@{body('Parse_Firefly_Result_JSON')?['outputs']}`}</inlineCode>{` Notice we're explicitly using the `}<inlineCode parentName=\"p\">{`outputs`}</inlineCode>{` portion of the result which will contain one object per image result. `}</p>\n    <p>{`Within this loop, add an `}<em parentName=\"p\">{`Append to String variable`}</em>{` step. The variable will be `}<inlineCode parentName=\"p\">{`images`}</inlineCode>{`, and the value, this little bit of complex logic: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`@{concat('<img src=\"',items('For_each')?['image']['presignedUrl'],'\">')}\n`}</code></pre>\n    <p>{`This value uses the `}<inlineCode parentName=\"p\">{`contact`}</inlineCode>{` function to join three strings:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`First, the beginning of an HTML image tag.`}</li>\n      <li parentName=\"ul\">{`Then, the current image from the `}<inlineCode parentName=\"li\">{`outputs`}</inlineCode>{` loop, specifying the `}<inlineCode parentName=\"li\">{`presignedUrl`}</inlineCode>{` value.`}</li>\n      <li parentName=\"ul\">{`A closing bracket.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"step-11-email-the-result\"\n    }}>{`Step 11: Email the Result`}</h2>\n    <p>{`The final step will handle emailing the result. You want to ensure it's in the loop for our prompts but `}<em parentName=\"p\">{`not`}</em>{` the previous loop that iterated over the image results. `}</p>\n    <p>{`For the `}<inlineCode parentName=\"p\">{`To`}</inlineCode>{` field, specify your email and pick anything appropriate for the `}<inlineCode parentName=\"p\">{`Subject`}</inlineCode>{`. `}</p>\n    <p>{`The body should contain the prompt and our `}<inlineCode parentName=\"p\">{`images`}</inlineCode>{` variable:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Here are your generated images for the prompt, @{items('Apply_to_each')?['Title']}\n\n@{variables('images')}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"results\"\n    }}>{`Results`}</h2>\n    <p>{`With the flow complete, we can save and test it. As it processes, it will fire off one email as each prompt is done. The images are somewhat large, so the screenshot below only shows one, but the additional results are directly beneath it:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"650px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"108.43750000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/5530d/shot6.webp 320w\", \"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/0c8fb/shot6.webp 640w\", \"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/309d5/shot6.webp 650w\"],\n            \"sizes\": \"(max-width: 650px) 100vw, 650px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/dd4a7/shot6.png 320w\", \"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/0f09e/shot6.png 640w\", \"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/663f3/shot6.png 650w\"],\n            \"sizes\": \"(max-width: 650px) 100vw, 650px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/7fd87fb4d3bfd89ec59cd67f03a27ee4/663f3/shot6.png\",\n            \"alt\": \"Email example\",\n            \"title\": \"Email example\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","isMDXComponent"],"sourceRoot":""}