"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[7980],{10814:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return r},default:function(){return u}});var n=t(58168),i=t(80045),o=(t(88763),t(15680)),s=t(83407);const l=["components"],r={},d=(p="InlineAlert",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var p;const m={_frontmatter:r},c=s.A;function u(e){let{components:a}=e,t=(0,i.A)(e,l);return(0,o.mdx)(c,(0,n.A)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"using-the-firefly-fill-image-api"},"Using the Firefly Fill Image API"),(0,o.mdx)("p",null,"Learn how to use the Fill Image API in your code workflows. "),(0,o.mdx)("h2",{id:"introduction"},"Introduction"),(0,o.mdx)("p",null,"Generative Fill is a powerful Firefly feature that lets designers modify an existing image using AI to replace a portion of an image with generated content. The content replaced might be a small portion of an image, or an entire background behind a central object. In this guide, you will see how this can be done using the ",(0,o.mdx)("a",{parentName:"p",href:"../api/generative_fill/V3/"},"Firefly Fill API"),"."),(0,o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Firefly API credentials. If you don't have them yet, first visit the Firefly Services ",(0,o.mdx)("a",{parentName:"li",href:"../../../guides/get-started.md"},"Getting Started")," guide to obtain a ",(0,o.mdx)("inlineCode",{parentName:"li"},"client_id")," and ",(0,o.mdx)("inlineCode",{parentName:"li"},"client_secret"),"."),(0,o.mdx)("li",{parentName:"ul"},"Node.js installed on your machine and basic familiarity with ",(0,o.mdx)("inlineCode",{parentName:"li"},"JavaScript"),". ",(0,o.mdx)("strong",{parentName:"li"},"Note:")," The code for this guide will make use of the ",(0,o.mdx)("a",{parentName:"li",href:"../api/image_generation/V3/"},"Firefly REST APIs")," via Node.js, but could be written in any language, or with the ",(0,o.mdx)("a",{parentName:"li",href:"https://developer.adobe.com/firefly-services/docs/guides/sdks/"},"SDK"),".")),(0,o.mdx)("h2",{id:"fill-image-api-overview"},"Fill Image API Overview"),(0,o.mdx)("p",null,"Before getting into the code, let's consider how the Fill Image API works at a high level."),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"You begin with a source image, which can either be uploaded to Firefly Services, or used with one of the supported cloud storage providers. For this guide, you'll use a local image uploaded via the ",(0,o.mdx)("a",{parentName:"li",href:"../api/upload_image/"},"Firefly Upload API"),"."),(0,o.mdx)("li",{parentName:"ul"},"You then provide a ",(0,o.mdx)("em",{parentName:"li"},"masked")," version of the image. That mask will be where Firefly adds it's generated content."),(0,o.mdx)("li",{parentName:"ul"},"You can ",(0,o.mdx)("em",{parentName:"li"},"optionally")," specify a ",(0,o.mdx)("inlineCode",{parentName:"li"},"prompt")," to help Firefly create the filled region. If not specified, Firefly only uses the source image itself as a guide.")),(0,o.mdx)("h2",{id:"source-and-mask-images"},"Source and Mask Images"),(0,o.mdx)("p",null,"The source and mask images are below, and will be uploaded using ",(0,o.mdx)("a",{parentName:"p",href:"../api/upload_image/"},"Firefly's Upload API"),"."),(0,o.mdx)("h5",{id:"source-image"},"Source image"),(0,o.mdx)("p",null,(0,o.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"500px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/a9b1e1e9dd93847af5a44d015aa1ec48/5530d/gen-fill-source.webp 320w","/ff-services-docs/static/a9b1e1e9dd93847af5a44d015aa1ec48/601b1/gen-fill-source.webp 500w"],sizes:"(max-width: 500px) 100vw, 500px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/a9b1e1e9dd93847af5a44d015aa1ec48/dd4a7/gen-fill-source.png 320w","/ff-services-docs/static/a9b1e1e9dd93847af5a44d015aa1ec48/0eb09/gen-fill-source.png 500w"],sizes:"(max-width: 500px) 100vw, 500px",type:"image/png"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/a9b1e1e9dd93847af5a44d015aa1ec48/0eb09/gen-fill-source.png",alt:"Source image",title:"Source image",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,o.mdx)("h5",{id:"mask-image"},"Mask image"),(0,o.mdx)("p",null,(0,o.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"500px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/258ed7fcb2a70fb986107fb085d64b21/5530d/gen-fill-mask.webp 320w","/ff-services-docs/static/258ed7fcb2a70fb986107fb085d64b21/601b1/gen-fill-mask.webp 500w"],sizes:"(max-width: 500px) 100vw, 500px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/258ed7fcb2a70fb986107fb085d64b21/dd4a7/gen-fill-mask.png 320w","/ff-services-docs/static/258ed7fcb2a70fb986107fb085d64b21/0eb09/gen-fill-mask.png 500w"],sizes:"(max-width: 500px) 100vw, 500px",type:"image/png"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/258ed7fcb2a70fb986107fb085d64b21/0eb09/gen-fill-mask.png",alt:"Mask image",title:"Mask image",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Note:"),' The Photoshop API has a "Create Mask" endpoint that can be used to automate the creation of a mask, but at this time, the mask is created in a way that does not yet work with the Firefly Fill Image endpoint. The image mask must be inverted. That could either be done with a second Photoshop API, the ActionJSON endpoint -- or instead, use one ActionJSON call to do both. This is only a temporary limitation, however, and will be fixed soon.'),(0,o.mdx)("h2",{id:"calling-the-fill-image-api"},"Calling the Fill Image API"),(0,o.mdx)("p",null,"A simple example of the request body required to use the ",(0,o.mdx)("a",{parentName:"p",href:"../api/generative_fill/"},"Fill Image API")," is below:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "numVariations": 1,\n  "size": {\n    "width": 2048,\n    "height": 2048\n  },\n  "image": {\n    "source": {\n      "uploadId": "string"\n    },\n    "mask": {\n      "uploadId": "string"\n    }\n  }\n}\n')),(0,o.mdx)("p",null,"More options are available and may be found in the ",(0,o.mdx)("a",{parentName:"p",href:"../api/generative_fill/V3"},"API Reference"),". Please note that you could also use ",(0,o.mdx)("a",{parentName:"p",href:"./using-style-structure-refs.md#working-with-reference-images"},"cloud storage URLs (in the form of presigned URLs)")," instead of uploaded assets as desired."),(0,o.mdx)("p",null,"Below is a sample JavaScript function that could be used to call the ",(0,o.mdx)("a",{parentName:"p",href:"../api/generative_fill/V3"},"Fill Image API"),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"async function genFill(maskId, sourceId, width, height, prompt, id, token) {\n\n    let body = {\n        numVariations:1,\n        size:{\n            width,\n            height\n        },\n        prompt,\n        image: {\n            mask: {\n                uploadId: maskId\n            },\n            source: {\n                uploadId: sourceId\n            }   \n        }\n    }\n\n    let req = await fetch('https://firefly-api.adobe.io/v3/images/fill', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':`Bearer ${token}`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n")),(0,o.mdx)("p",null,"This next step requires you to use some utility functions to 1) authenticate and obtain your access token (via ",(0,o.mdx)("inlineCode",{parentName:"p"},"getAccessToken()"),"), and 2) upload your source and mask images with a ",(0,o.mdx)("a",{parentName:"p",href:"../api/upload_image/"},"Firefly Upload API")," wrapper function (ie: ",(0,o.mdx)("inlineCode",{parentName:"p"},"uploadImage()"),"). The latter ensures you will have the ",(0,o.mdx)("inlineCode",{parentName:"p"},"uploadId")," needed for both the source and mask images when you are ready to make the call to ",(0,o.mdx)("inlineCode",{parentName:"p"},"genFill()"),". These utility methods are provided in the ",(0,o.mdx)("a",{parentName:"p",href:"#complete-source-code"},"complete source code")," section for you. "),(0,o.mdx)(d,{variant:"success",slots:"title, text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"TIP"),(0,o.mdx)("p",null,"We recommend you refer to the ",(0,o.mdx)("a",{parentName:"p",href:"./create-your-first-ff-application.md"},"Create your First Firefly Application")," guide for a step-by-step walkthrough on the utility methods used in the how-to guides for authenticating (via ",(0,o.mdx)("inlineCode",{parentName:"p"},"getAccessToken()"),"), uploading images for use in the calls (",(0,o.mdx)("inlineCode",{parentName:"p"},"uploadImage()"),"), and for downloading the generated results (",(0,o.mdx)("inlineCode",{parentName:"p"},"downloadFile()"),")."),(0,o.mdx)("p",null,"Below is an example snippet of using the aforementioned utility functions with the necessary parameters:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"let token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n\nlet upload = await uploadImage('./gen-fill-mask.png', 'image/png', CLIENT_ID, token);\nlet maskedImage = upload.images[0].id;\n\nupload = await uploadImage('./gen-fill-source.png', 'image/png', CLIENT_ID, token);\nlet sourceImage = upload.images[0].id;\n")),(0,o.mdx)("p",null,"Now that you have everything needed for the call parameters, make a call to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"genFill()")," function with the prompt: ",(0,o.mdx)("inlineCode",{parentName:"p"},'"a beach at sunset"'),", and save the result using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"downloadFile()")," utility function (also provided in the ",(0,o.mdx)("a",{parentName:"p",href:"#complete-source-code"},"complete source code")," section). "),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},'let result = await genFill(maskedImage, sourceImage, 2048, 2048, "a beach at sunset", CLIENT_ID, token);\nlet fileName = `./output/gen-fill.jpg`;\nawait downloadFile(result.outputs[0].image.url, fileName);\n')),(0,o.mdx)("h5",{id:"generated-result"},"Generated result"),(0,o.mdx)("p",null,(0,o.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"500px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"75%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/e0860520bc353b946ce4782a4ce44764/5530d/gen-fill.webp 320w","/ff-services-docs/static/e0860520bc353b946ce4782a4ce44764/601b1/gen-fill.webp 500w"],sizes:"(max-width: 500px) 100vw, 500px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/e0860520bc353b946ce4782a4ce44764/8980b/gen-fill.jpg 320w","/ff-services-docs/static/e0860520bc353b946ce4782a4ce44764/953fe/gen-fill.jpg 500w"],sizes:"(max-width: 500px) 100vw, 500px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/e0860520bc353b946ce4782a4ce44764/953fe/gen-fill.jpg",alt:"Result with basic fill",title:"Result with basic fill",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Note:")," A more detailed prompt would provide better results, and remember that the masked region could be smaller as well, rather than the complete background. "),(0,o.mdx)("h2",{id:"complete-source-code"},"Complete Source Code"),(0,o.mdx)("p",null,"The complete source code containing utilities for authentication, uploading, and downloading is provided below."),(0,o.mdx)(d,{variant:"warning",slots:"title, text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"IMPORTANT"),(0,o.mdx)("p",null,"The Node.js code uses imports and top-level ",(0,o.mdx)("inlineCode",{parentName:"p"},"await"),", so you must either use the ",(0,o.mdx)("inlineCode",{parentName:"p"},".mjs")," extension on your script file, or ensure you have a ",(0,o.mdx)("inlineCode",{parentName:"p"},"package.json")," with ",(0,o.mdx)("inlineCode",{parentName:"p"},'type: "module"'),"."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n\n/*\n  Set the credentials based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n\nasync function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,firefly_enterprise,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1-stg1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nasync function uploadImage(filePath, fileType, id, token) {\n\n    let stream = fs.createReadStream(filePath);\n    let stats = fs.statSync(filePath);\n    let fileSizeInBytes = stats.size;\n\n    let upload = await fetch('https://firefly-api.adobe.io/v2/storage/image', {\n        method:'POST', \n        headers: {\n            'Authorization':`Bearer ${token}`, \n            'X-API-Key':id, \n            'Content-Type':fileType, \n            'Content-Length':fileSizeInBytes\n        }, \n        duplex:'half', \n        body:stream\n    });\n\n    return await upload.json();\n}\n\nasync function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n\nasync function genFill(maskId, sourceId, width, height, prompt, id, token) {\n\n    let body = {\n        numVariations:1,\n        size:{\n            width,\n            height\n        },\n        prompt,\n        image: {\n            mask: {\n                uploadId: maskId\n            },\n            source: {\n                uploadId: sourceId\n            }   \n        }\n    }\n\n    let req = await fetch('https://firefly-api.adobe.io/v3/images/fill', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':`Bearer ${token}`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n\nlet upload = await uploadImage('./gen-fill-mask.png', 'image/png', CLIENT_ID, token);\nlet maskedImage = upload.images[0].id;\n\nupload = await uploadImage('./gen-fill-source.png', 'image/png', CLIENT_ID, token);\nlet sourceImage = upload.images[0].id;\n\nlet result = await genFill(maskedImage, sourceImage, 2048, 2048, \"a beach at sunset\", CLIENT_ID, token);\nlet fileName = `./output/gen-fill.jpg`;\nawait downloadFile(result.outputs[0].image.url, fileName);\n")),(0,o.mdx)("h2",{id:"next-steps"},"Next Steps"),(0,o.mdx)("p",null,"For more examples of what's possible with Firefly APIs, check out the other guides in this ",(0,o.mdx)("a",{parentName:"p",href:"../how-tos/"},"how-tos")," section and the ",(0,o.mdx)("a",{parentName:"p",href:"../api/image_generation/V3/"},"API Reference")," for more details."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-firefly-api-guides-how-tos-using-fill-image-md-bb9cc1d82936c80ad885.js.map