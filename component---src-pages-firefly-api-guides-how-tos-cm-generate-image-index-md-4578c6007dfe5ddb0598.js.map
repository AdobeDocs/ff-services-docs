{"version":3,"file":"component---src-pages-firefly-api-guides-how-tos-cm-generate-image-index-md-4578c6007dfe5ddb0598.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/firefly-api/guides/how-tos/cm-generate-image/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-models-generate-image-api-tutorial\"\n    }}>{`Custom Models Generate Image API Tutorial`}</h1>\n    <p>{`Learn to generate images using a Firefly Custom Model.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}></th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><span parentName=\"td\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1280px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"70.625%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/5530d/customModelTrained.webp 320w\", \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/0c8fb/customModelTrained.webp 640w\", \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/94b1e/customModelTrained.webp 1280w\", \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/e3f3a/customModelTrained.webp 1854w\"],\n                  \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/dd4a7/customModelTrained.png 320w\", \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/0f09e/customModelTrained.png 640w\", \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/bbbf7/customModelTrained.png 1280w\", \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/b7708/customModelTrained.png 1854w\"],\n                  \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/ff-services-docs/static/4c5b230fe14fb1fd857971010e8a04fb/bbbf7/customModelTrained.png\",\n                  \"alt\": \"trained-custom-model\",\n                  \"title\": \"trained-custom-model\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span>{` `}<p style={{\n              \"textAlign\": \"center\"\n            }}>{`Custom Image Model`}</p></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><span parentName=\"td\" {...{\n              \"className\": \"gatsby-resp-image-wrapper\",\n              \"style\": {\n                \"position\": \"relative\",\n                \"display\": \"block\",\n                \"marginLeft\": \"auto\",\n                \"marginRight\": \"auto\",\n                \"maxWidth\": \"1280px\"\n              }\n            }}>{`\n      `}<span parentName=\"span\" {...{\n                \"className\": \"gatsby-resp-image-background-image\",\n                \"style\": {\n                  \"paddingBottom\": \"73.125%\",\n                  \"position\": \"relative\",\n                  \"bottom\": \"0\",\n                  \"left\": \"0\",\n                  \"display\": \"block\",\n                  \"transition\": \"opacity 0.5s 0.5s\",\n                  \"pointerEvents\": \"none\"\n                }\n              }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/5530d/almond.webp 320w\", \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/0c8fb/almond.webp 640w\", \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/94b1e/almond.webp 1280w\", \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/a111e/almond.webp 1614w\"],\n                  \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                  \"type\": \"image/webp\"\n                }}></source>{`\n          `}<source parentName=\"picture\" {...{\n                  \"srcSet\": [\"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/dd4a7/almond.png 320w\", \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/0f09e/almond.png 640w\", \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/bbbf7/almond.png 1280w\", \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/0914b/almond.png 1614w\"],\n                  \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n                  \"type\": \"image/png\"\n                }}></source>{`\n          `}<img parentName=\"picture\" {...{\n                  \"className\": \"gatsby-resp-image-image\",\n                  \"src\": \"/ff-services-docs/static/7b16fc09386a82cebf81d4c2d8e357e2/bbbf7/almond.png\",\n                  \"alt\": \"generated-image\",\n                  \"title\": \"generated-image\",\n                  \"loading\": \"lazy\",\n                  \"style\": {\n                    \"width\": \"100%\",\n                    \"height\": \"100%\",\n                    \"margin\": \"0\",\n                    \"verticalAlign\": \"middle\",\n                    \"position\": \"absolute\",\n                    \"opacity\": \"0\",\n                    \"transition\": \"opacity 0.5s\",\n                    \"color\": \"inherit\",\n                    \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n                    \"top\": \"0\",\n                    \"left\": \"0\"\n                  }\n                }}></img>{`\n        `}</picture>{`\n    `}</span>{` `}<p style={{\n              \"textAlign\": \"center\"\n            }}>{`Output Image`}</p></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`In this tutorial you will:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`List custom models that are available.`}</li>\n      <li parentName=\"ul\">{`Generate images using a specific custom model, with the custom parameters: prompt, style presets, and image size.`}</li>\n    </ul>\n    <p>{`Depending on your learning style, you may prefer to walk through this tutorial step-by-step or `}<a parentName=\"p\" {...{\n        \"href\": \"#implementation-example\"\n      }}>{`jump immediately to the full source code`}</a>{` at the bottom of this webpage.`}</p>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Imagine you work at a global fragrance company and are creating an on-brand marketing campaign. This season introduced a new fad in the world of scent: almonds. The people want almond candles, almond soap, almond scrubs, and almond perfume. There's almond in every product in the new line. The pitch for this new trend with legumes is they're clean, natural, and (somehow) cozy, and comfortable.`}</p>\n    <p>{`So, let's make some images.`}</p>\n    <h2 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h2>\n    <h3 {...{\n      \"id\": \"credentials\"\n    }}>{`Credentials`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Retrieve a Firefly Services `}<strong parentName=\"li\">{`Client ID`}</strong>{` and `}<strong parentName=\"li\">{`Client Secret`}</strong>{` from your `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.adobe.com/developer-console/docs/guides/services/services-add-api-oauth-s2s/#api-overview\"\n        }}>{`Adobe Developer Console project`}</a>{`. `}<strong parentName=\"li\">{`Securely store these credentials and never expose them in client-side or public code.`}</strong></li>\n    </ol>\n    <h3 {...{\n      \"id\": \"set-up-your-environment\"\n    }}>{`Set up your environment`}</h3>\n    <p>{`Along with the cURL commands, this tutorial offers code samples in JavaScript and Python.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Set up an environment by running the following in a secure terminal:`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"Python, JavaScript\" mdxType=\"CodeBlock\" />\n    <p>{`JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir cm-generate-image-api-tutorial\ncd cm-generate-image-api-tutorial\nnpm init --y\nnpm install axios qs\ntouch index.js\n`}</code></pre>\n    <p>{`Python`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`mkdir cm-generate-image-api-tutorial\ncd cm-generate-image-api-tutorial\npython -m pip install requests\ntouch main.py\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"retrieve-an-access-token\"\n    }}>{`Retrieve an access token`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Open a secure terminal and `}<inlineCode parentName=\"li\">{`export`}</inlineCode>{` your Client ID and Client Secret as environment variables to use later.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export CUSTOM_MODELS_CLIENT_ID=<yourClientId>\nexport CUSTOM_MODELS_CLIENT_SECRET=<yourClientSecret>\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Generate an access token.`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"bash, Python, JavaScript\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"curl\"\n    }}>{`cURL`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl --location 'https://ims-na1.adobelogin.com/ims/token/v3' \\\\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\\\n--data-urlencode 'grant_type=client_credentials' \\\\\n--data-urlencode \"client_id=$CUSTOM_MODELS_CLIENT_ID\" \\\\\n--data-urlencode \"client_secret=$CUSTOM_MODELS_CLIENT_SECRET\" \\\\\n--data-urlencode 'scope=openid,AdobeID,firefly_api,ff_apis'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"python\"\n    }}>{`Python`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def retrieve_access_token():\n    client_id = os.environ['CUSTOM_MODELS_CLIENT_ID']\n    client_secret = os.environ['CUSTOM_MODELS_CLIENT_SECRET']\n\n    token_url = 'https://ims-na1.adobelogin.com/ims/token/v3'\n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'openid,AdobeID,firefly_api,ff_apis'\n    }\n\n    response = requests.post(token_url, data=payload)\n    response.raise_for_status()\n    token_data = response.json()\n    print(\"Access Token Retrieved\")\n    return token_data['access_token']\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function retrieveAccessToken() {\n  const data = qs.stringify({\n    grant_type: 'client_credentials',\n    client_id: process.env.CUSTOM_MODELS_CLIENT_ID,\n    client_secret: process.env.CUSTOM_MODELS_CLIENT_SECRET,\n    scope: 'openid,AdobeID,firefly_api,ff_apis',\n  });\n\n  const config = {\n    method: 'post',\n    url: 'https://ims-na1.adobelogin.com/ims/token/v3',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    data: data,\n  };\n\n  try {\n    const response = await axios.request(config);\n    console.log('Access Token Retrieved');\n    return response.data.access_token;\n  } catch (error) {\n    console.error('Error retrieving access token:', error.response.data);\n  }\n}\n`}</code></pre>\n    <p>{`The response will look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"access_token\":\"yourAccessTokenAsdf123\",\"token_type\":\"bearer\",\"expires_in\":86399}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Export the access token to use later.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export CUSTOM_MODELS_ACCESS_TOKEN=<yourAccessToken>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"find-a-custom-model\"\n    }}>{`Find a custom model`}</h2>\n    <p>{`Remember those pitch requirements? Clean, natural, cozy, and comfortable. So, all the images for our campaign should align with these characteristics.`}</p>\n    <p>{`Do we have a custom model suitable for that? Let's check.`}</p>\n    <ol>\n      <li parentName=\"ol\">{`List all the available models by calling the endpoint below.`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"bash, Python, JavaScript\" mdxType=\"CodeBlock\" />\n    <p>{`cURL`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl --request GET 'https://firefly-api.adobe.io/v3/custom-models' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Accept: application/json' \\\\\n--header \"x-api-key: $CUSTOM_MODELS_CLIENT_ID\" \\\\\n--header \"Authorization: Bearer $CUSTOM_MODELS_ACCESS_TOKEN\"\n`}</code></pre>\n    <p>{`Python`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def list_custom_models(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CUSTOM_MODELS_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    response = requests.get(\n        'https://firefly-api.adobe.io/v3/custom-models',\n        headers=headers\n    )\n    response.raise_for_status()\n    models_response = response.json()\n    print(\"List Custom Models Response:\", models_response)\n    return models_response\n`}</code></pre>\n    <p>{`JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function listCustomModels(accessToken) {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \"x-api-key\": process.env.CUSTOM_MODELS_CLIENT_ID,\n    Authorization: \\`Bearer \\${accessToken}\\`,\n  };\n\n  const config = {\n    method: \"get\",\n    url: \"https://firefly-api.adobe.io/v3/custom-models\",\n    headers: headers,\n  };\n\n  try {\n    const response = await axios.request(config);\n    console.log(\"List Custom Models Response:\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error during listCustomModels:\", error);\n  }\n}\n`}</code></pre>\n    <p>{`The response will look like this:`}</p>\n    {/*TODO: Update response*/}\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"custom_models\": [\n        {\n            \"version\": \"1\",\n            \"assetName\": \"Warm Custom Model.ffcustommodel\",\n            \"size\": 16513991265,\n            \"etag\": \"\\\\\"e7ee78220f4d46ceb766758e0e300a51\\\\\"\",\n            \"trainingMode\": \"style\",\n            \"assetId\": \"urn:aaid:sc:VA6C2:bc1f46cd-be98-4a7b-9ffe-1111111111\",\n            \"mediaType\": \"application/vnd.adobe.ffmodel+dcx\",\n            \"createdDate\": 1733928288871,\n            \"modifiedDate\": 1733928294741,\n            \"publishedState\": \"published\",\n            \"baseModel\": {\n                \"name\": \"clio_v2\",\n                \"version\": \"2.0.0\"\n            },\n            \"samplePrompt\": \"A bean generated in a warm setting with brown colours\",\n            \"displayName\": \"Warm Custom Model\",\n            \"conceptId\": \"\"\n        }\n    ],\n    \"_links\": {\n        \"page\": {\n            \"href\": \"/v3/custom-models?start={start}&limit={limit}\",\n            \"rel\": \"page\",\n            \"templated\": true\n        }\n    },\n    \"total_count\": 1\n}\n`}</code></pre>\n    <p>{`It looks like we have a suitable model, a Warm Custom Model! Let's choose this model to generate our images.`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`To use a custom model, you'll need the custom model ID. Find the custom model ID in the response object, labeled `}<inlineCode parentName=\"li\">{`assetId`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Export this ID for use later.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`export CUSTOM_MODEL_ID=urn:aaid:sc:VA6C2:bc1f46cd-be98-4a7b-9ffe-1111111111\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"generate-your-images\"\n    }}>{`Generate your images`}</h2>\n    <p>{`Time to put the AI to work. Let's use the Custom Model ID to generate images with our custom model!`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Use Firefly's Generate Image API to generate product images. With our custom model to consider, include the header `}<inlineCode parentName=\"li\">{`x-model-version: image3_custom`}</inlineCode>{` in your request, as this tells the system to use our custom model for image generation.`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"bash, Python, JavaScript\" mdxType=\"CodeBlock\" />\n    <p>{`cURL`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl --request POST 'https://firefly-api.adobe.io/v3/images/generate-async' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Accept: application/json' \\\\\n--header 'x-accept-mimetype: image/jpeg' \\\\\n--header 'x-model-version: image3_custom' \\\\\n--header \"x-api-key: $CUSTOM_MODELS_CLIENT_ID\" \\\\\n--header \"Authorization: Bearer $CUSTOM_MODELS_ACCESS_TOKEN\" \\\\\n--data \"{\n    \\\\\"numVariations\\\\\": 2,\n    \\\\\"seeds\\\\\": [66080, 82683],\n    \\\\\"size\\\\\": {\\\\\"width\\\\\": 2048,\\\\\"height\\\\\": 2048},\n    \\\\\"prompt\\\\\": \\\\\"An almond seed in a warm setting\\\\\",\n    \\\\\"contentClass\\\\\": \\\\\"photo\\\\\",\n    \\\\\"visualIntensity\\\\\": 6,\n    \\\\\"style\\\\\": {\n        \\\\\"presets\\\\\": [\\\\\"painting\\\\\"],\n        \\\\\"strength\\\\\": 50\n    },\n    \\\\\"promptBiasingLocaleCode\\\\\": \\\\\"en-US\\\\\",\n    \\\\\"customModelId\\\\\": \\\\\"$CUSTOM_MODEL_ID\\\\\"\n  }\"\n`}</code></pre>\n    <p>{`Python`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def generate_images_with_custom_model(access_token, custom_model_id):\n    url = 'https://firefly-api.adobe.io/v3/images/generate-async'\n    headers = {\n        'Accept': 'application/json',\n        'Authorization': f'Bearer {access_token}',\n        'Content-Type': 'application/json',\n        'x-accept-mimetype': 'image/jpeg',\n        'x-model-version':'image3_custom',\n        'x-api-key': os.environ['CUSTOM_MODELS_CLIENT_ID'],\n    }\n\n    data = {\n        \"numVariations\": 2,\n        \"seeds\": [66080, 82683],\n        \"size\": {\"width\": 2048, \"height\": 2048},\n        \"prompt\": \"An almond seed in a warm setting\",\n        \"contentClass\": \"photo\",\n        \"visualIntensity\": 6,\n        \"style\": {\n            \"presets\": [\"painting\"],\n            \"strength\": 50\n        },\n        \"promptBiasingLocaleCode\": \"en-US\",\n        \"customModelId\": custom_model_id\n    }\n\n    response = requests.post(url, headers=headers, json=data)\n    response.raise_for_status()\n    result = response.json()\n    print(\"Generate Image Response:\", result)\n    return result\n\n`}</code></pre>\n    <p>{`JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function generateImagesWithCustomModel(accessToken, customModelId) {\n  const config = {\n    method: \"post\",\n    url: \"https://firefly-api.adobe.io/v3/images/generate-async\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \\`Bearer \\${accessToken}\\`,\n      \"Content-Type\": \"application/json\",\n      \"x-accept-mimetype\": \"image/jpeg\",\n      \"x-model-version\":\"image3_custom\",\n      \"x-api-key\": process.env.CUSTOM_MODELS_CLIENT_ID,\n    },\n    data: JSON.stringify({\n      \"numVariations\": 2,\n      \"seeds\": [66080, 82683],\n      \"size\": { \"width\": 2048, \"height\": 2048 },\n      \"prompt\": \"An almond seed in a warm setting\",\n      \"contentClass\": \"photo\",\n      \"visualIntensity\": 6,\n      \"style\": {\n        \"presets\": [\"painting\"],\n        \"strength\": 50\n      },\n      \"promptBiasingLocaleCode\": \"en-US\",\n      \"customModelId\": customModelId\n    })\n  };\n\n  const response = await axios.request(config);\n  return response.data;\n}\n`}</code></pre>\n    <p>{`The response will look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"jobId\": \"urn:ff:jobs:EXAMPLE85125:2dc3bd5f-1606-4658-8781-111111111\",\n  \"statusUrl\": \"https://firefly-epo852211.adobe.io/v3/status/urn:ff:jobs:EXAMPLE85125:2dc3bd5f-1606-4658-8781-111111111\",\n  \"cancelUrl\": \"https://firefly-epo852211.adobe.io/v3/cancel/urn:ff:jobs:EXAMPLE85125:2dc3bd5f-1606-4658-8781-111111111\"\n} \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"check-the-image-generation-status\"\n    }}>{`Check the image generation status`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Use the Get Status endpoint to get the image generation job status. Here is an example of how to do this.`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"bash, Python, JavaScript\" mdxType=\"CodeBlock\" />\n    <p>{`cURL`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl --location 'https://firefly-epo852211.adobe.io/v3/status/urn:ff:jobs:EXAMPLE85125:2dc3bd5f-1606-4658-8781-111111111' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Accept: application/json' \\\\\n--header \"x-api-key: $CUSTOM_MODELS_CLIENT_ID\" \\\\\n--header \"Authorization: Bearer $CUSTOM_MODELS_ACCESS_TOKEN\" \n`}</code></pre>\n    <p>{`Python`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def check_job_status(status_url, access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CUSTOM_MODELS_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}',\n    }\n\n    status_url = status_url\n    response = requests.get(status_url, headers=headers)\n    response.raise_for_status()\n    return response.json()\n`}</code></pre>\n    <p>{`JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function checkJobStatus(status_url, accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.CUSTOM_MODELS_CLIENT_ID,\n    Authorization: \\`Bearer \\${accessToken}\\`,\n  };\n\n  const response = await axios.get(status_url, { headers: headers });\n  return response.data;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"implementation-example\"\n    }}>{`Implementation example`}</h2>\n    <p>{`Review the full implementation example below to learn more.`}</p>\n    <p>{`You'll need to `}<a parentName=\"p\" {...{\n        \"href\": \"#set-up-your-environment\"\n      }}>{`set up your environment`}</a>{` before running this code.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"header, text\" mdxType=\"InlineAlert\" />\n    <p>{`Example code is NOT production ready`}</p>\n    <p>{`Because this code is for educational purposes only, it IS NOT production-ready and requires additional error handling, logging, and security measures before it can be used in a live application.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"Python, JavaScript\" mdxType=\"CodeBlock\" />\n    <p>{`Python`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os\nimport time\nimport requests\nimport sys\n\nclient_id = os.environ['CUSTOM_MODELS_CLIENT_ID']\nclient_secret = os.environ['CUSTOM_MODELS_CLIENT_SECRET']\n\ndef retrieve_access_token():\n    token_url = 'https://ims-na1.adobelogin.com/ims/token/v3'\n\n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'openid,AdobeID,firefly_api,ff_apis'\n    }\n\n    response = requests.post(token_url, data=payload)\n    response.raise_for_status()\n    token_data = response.json()\n    print(\"Access Token Retrieved\")\n    return token_data['access_token']\n\ndef list_custom_models(access_token):\n    url = 'https://firefly-api.adobe.io/v3/custom-models'\n    headers = {\n        'Authorization': f'Bearer {access_token}',\n        'x-api-key': os.environ['CUSTOM_MODELS_CLIENT_ID'],\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    }\n\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n    models_response = response.json()\n    print(\"List Custom Models Response:\", models_response)\n    return models_response\n\ndef generate_image_async(access_token, custom_model_id):\n    url = 'https://firefly-api.adobe.io/v3/images/generate-async'\n    headers = {\n        'Accept': 'application/json',\n        'Authorization': f'Bearer {access_token}',\n        'Content-Type': 'application/json',\n        'x-accept-mimetype': 'image/jpeg',\n        'x-model-version':'image3_custom',\n        'x-api-key': os.environ['CUSTOM_MODELS_CLIENT_ID'],\n    }\n\n    data = {\n        \"numVariations\": 2,\n        \"seeds\": [66080, 82683],\n        \"size\": {\"width\": 2048, \"height\": 2048},\n        \"prompt\": \"Laika running over rolling green hills with a big vibrant sun in the background\",\n        \"negativePrompt\": \"red\",\n        \"contentClass\": \"photo\",\n        \"visualIntensity\": 6,\n        \"style\": {\n            \"presets\": [\"painting\"],\n            \"strength\": 50\n        },\n        \"promptBiasingLocaleCode\": \"en-US\",\n        \"customModelId\": custom_model_id\n    }\n\n    response = requests.post(url, headers=headers, json=data)\n    response.raise_for_status()\n    result = response.json()\n    print(\"Generate Image Async Response:\", result)\n\n    status_url = result.get('statusUrl')\n    if not status_url:\n        print(\"No status_url returned. Cannot poll status.\")\n        sys.exit(1)\n\n    return status_url\n\ndef check_job_status(status_url, access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CUSTOM_MODELS_CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}',\n    }\n\n    try:\n        status = 'running'\n        while status not in ['succeeded', 'failed']:\n            time.sleep(5)  # Wait for 5 seconds before checking status again\n            response = requests.get(status_url, headers=headers)\n            response.raise_for_status()\n            status_response = response.json()\n            status = status_response.get('status', 'unknown')\n            print(f'Job Status: {status}')\n\n        if status == 'succeeded':\n            print('Image generation completed successfully!')\n            print('Check the returned response for the image URLs or artifacts.')\n        else:\n            print('Image generation failed.')\n\n    except requests.exceptions.RequestException as error:\n        error_message = error.response.text if error.response else str(error)\n        print('Error checking job status:', error_message)\n        sys.exit(1)\n\ndef main():\n    # Step 1: Retrieve Access Token\n    access_token = retrieve_access_token()\n\n    # Step 2: List Custom Models\n    models_response = list_custom_models(access_token)\n\n    if models_response and 'custom_models' in models_response and len(models_response['custom_models']) > 0:\n        # Select the first model\n        custom_model_id = models_response['custom_models'][0].get('repo:assetId')\n        print(\"Using Custom Model ID:\", custom_model_id)\n    else:\n        print(\"No custom models found.\")\n        sys.exit(1)\n\n    # Step 3: Generate Image (Async)\n    status_url = generate_image_async(access_token, custom_model_id)\n\n    # Step 4: Poll Job Status\n    check_job_status(status_url, access_token)\n\nif __name__ == '__main__':\n    main()\n`}</code></pre>\n    <p>{`JavaScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const axios = require('axios');\nconst qs = require('qs');\nconst process = require('process');\n\n(async () => {\n  try {\n    // Step 1: Retrieve Access Token\n    const accessToken = await retrieveAccessToken();\n    console.log(\"Access Token Retrieved\");\n\n    // Step 2: List Custom Models\n    const modelsResponse = await listCustomModels(accessToken);\n    if (modelsResponse && modelsResponse.custom_models && modelsResponse.custom_models.length > 0) {\n      // Select the first model\n      const customModelId = modelsResponse.custom_models[0]['repo:assetId'];\n      console.log(\"Using Custom Model ID:\", customModelId);\n\n      // Step 3: Generate Image (Async)\n      const statusUrl = await generateImageAsync(accessToken, customModelId);\n      if (!statusUrl) {\n        console.log(\"No status_url returned. Cannot poll status.\");\n        process.exit(1);\n      }\n\n      // Step 4: Poll Job Status\n      await checkJobStatus(statusUrl, accessToken);\n    } else {\n      console.log(\"No custom models found.\");\n      process.exit(1);\n    }\n  } catch (error) {\n    console.error(\"An error occurred:\", error.response?.data || error.message || error);\n    process.exit(1);\n  }\n})();\n\nasync function retrieveAccessToken() {\n  const data = qs.stringify({\n    grant_type: \"client_credentials\",\n    client_id: process.env.CUSTOM_MODELS_CLIENT_ID,\n    client_secret: process.env.CUSTOM_MODELS_CLIENT_SECRET,\n    scope: \"openid,AdobeID,firefly_api,ff_apis\",\n  });\n\n  const config = {\n    method: \"post\",\n    url: \"https://ims-na1.adobelogin.com/ims/token/v3\",\n    headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n    data: data,\n  };\n\n  const response = await axios.request(config);\n  return response.data.access_token;\n}\n\nasync function listCustomModels(accessToken) {\n  const config = {\n    method: \"get\",\n    url: \"https://firefly-api.adobe.io/v3/custom-models\",\n    headers: {\n      \"Authorization\": \\`Bearer \\${accessToken}\\`,\n      \"x-api-key\": process.env.CUSTOM_MODELS_CLIENT_ID,\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n  };\n\n  const response = await axios.request(config);\n  console.log(\"List Custom Models Response:\", response.data);\n  return response.data;\n}\n\nasync function generateImageAsync(accessToken, customModelId) {\n  const config = {\n    method: \"post\",\n    url: \"https://firefly-api.adobe.io/v3/images/generate-async\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Authorization\": \\`Bearer \\${accessToken}\\`,\n      \"Content-Type\": \"application/json\",\n      \"x-accept-mimetype\": \"image/jpeg\",\n      \"x-model-version\": \"image3_custom\",\n      \"x-api-key\": process.env.CUSTOM_MODELS_CLIENT_ID,\n    },\n    data: JSON.stringify({\n      \"numVariations\": 2,\n      \"seeds\": [66080, 82683],\n      \"size\": { \"width\": 2048, \"height\": 2048 },\n      \"prompt\": \"Laika running over rolling green hills with a big vibrant sun in the background\",\n      \"negativePrompt\": \"red\",\n      \"contentClass\": \"photo\",\n      \"visualIntensity\": 6,\n      \"style\": {\n        \"presets\": [\"painting\"],\n        \"strength\": 50\n      },\n      \"promptBiasingLocaleCode\": \"en-US\",\n      \"customModelId\": customModelId\n    })\n  };\n\n  const response = await axios.request(config);\n  console.log(\"Generate Image Async Response:\", response.data);\n  return response.data.statusUrl;\n}\n\nasync function checkJobStatus(statusUrl, accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'x-api-key': process.env.CUSTOM_MODELS_CLIENT_ID,\n    'Authorization': \\`Bearer \\${accessToken}\\`,\n  };\n\n  let status = 'running';\n  try {\n    while (status !== 'succeeded' && status !== 'failed') {\n      // Wait 5 seconds before polling again\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      const response = await axios.get(statusUrl, { headers });\n      status = response.data.status || 'unknown';\n      console.log(\\`Job Status: \\${status}\\`);\n    }\n\n    if (status === 'succeeded') {\n      console.log('Image generation completed successfully!');\n      console.log('Check the returned response for the image URLs or artifacts.');\n    } else {\n      console.log('Image generation failed.');\n    }\n  } catch (error) {\n    const errorMessage = error.response?.data || error.message || error;\n    console.log('Error checking job status:', errorMessage);\n    process.exit(1);\n  }\n}\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"deepen-your-understanding\"\n    }}>{`Deepen your understanding`}</h2>\n    <p>{`Now that you have a working implementation, visit the `}<a parentName=\"p\" {...{\n        \"href\": \"../../api/image_generation/V3/\"\n      }}>{`reference documentation for the Generate Image API`}</a>{` to explore more advanced use cases and automate your workflows.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","style","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}