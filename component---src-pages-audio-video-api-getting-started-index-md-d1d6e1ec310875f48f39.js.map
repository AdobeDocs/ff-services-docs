{"version":3,"file":"component---src-pages-audio-video-api-getting-started-index-md-d1d6e1ec310875f48f39.js","mappings":"0TAMaA,EAAe,CAAC,EAKvBC,GAJgBC,EAIY,cAJJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5BI,EAAAA,EAAAA,KAAA,MAASH,EAClB,GAHsBD,MAKtB,MAAMK,EAAc,CAClBP,gBAEIQ,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIR,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,KAACE,GAASO,EAAAA,EAAAA,GAAA,GAAKR,EAAiBJ,EAAK,CAAES,WAAYA,EAAYI,QAAQ,eAG5EV,EAAAA,EAAAA,KAAA,MACE,GAAM,kBACJ,mBACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,YACJ,aACJA,EAAAA,EAAAA,KAAA,SAAI,uPACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,iBACJ,kBACJA,EAAAA,EAAAA,KAAA,SAAI,mFACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIW,WAAW,MAAM,wCACrBX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,MAAM,0EACrBX,EAAAA,EAAAA,KAAA,MAAIW,WAAW,MAAM,gLAEvBX,EAAAA,EAAAA,KAACL,EAAW,CAACiB,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjDV,EAAAA,EAAAA,KAAA,SAAI,mHACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,4BACJ,6BACJA,EAAAA,EAAAA,KAAA,SAAI,kHACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,kBACX,8PAINX,EAAAA,EAAAA,KAAA,SAAI,gDACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMW,WAAW,MAClB,UAAa,kBACX,0FAENX,EAAAA,EAAAA,KAAA,SAAI,6BAA4BA,EAAAA,EAAAA,KAAA,cAAYW,WAAW,KAAK,gBAA6B,0LACzFX,EAAAA,EAAAA,KAAA,SAAI,4EACJA,EAAAA,EAAAA,KAACL,EAAW,CAACiB,QAAQ,OAAOC,MAAM,gBAAgBH,QAAQ,iBAC1DV,EAAAA,EAAAA,KAAA,SAAI,yFACJA,EAAAA,EAAAA,KAAA,SAAI,oQACJA,EAAAA,EAAAA,KAAA,SAAI,6CAA4CA,EAAAA,EAAAA,KAAA,KAAGW,WAAW,IAC1D,KAAQ,uCACN,kCAAsC,KAGhD,CAEAP,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/audio-video-api/getting_started/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"authentication\"\n    }}>{`Authentication`}</h1>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Every request made to Firefly APIs must include an encrypted access token. Your secure, server-side application retrieves an access token by making a request to the Adobe Identity Management System (IMS) with your Client ID and Client Secret.`}</p>\n    <h3 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h3>\n    <p>{`Before you start, work with your Adobe representative to set up the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An Adobe Developer Console account.`}</li>\n      <li parentName=\"ul\">{`A project with Firefly API OAuth Server-to-Server credentials set up.`}</li>\n      <li parentName=\"ul\">{`Access to your Client ID and Client Secret from the Adobe Developer Console project. Securely store these credentials and never expose them in client-side or public code.`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`During the private beta phase, Client ID and Client Secret may be provisioned directly by the onboarding team.`}</p>\n    <h2 {...{\n      \"id\": \"retrieve-an-access-token\"\n    }}>{`Retrieve an access token`}</h2>\n    <p>{`Generate access tokens by sending a POST request to the IMS endpoint, using your Client ID and Client Secret:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl -X POST 'https://ims-na1.adobelogin.com/ims/token/v3' \\\\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\\\n-d 'grant_type=client_credentials&client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&scope=openid,AdobeID,firefly_enterprise'\n`}</code></pre>\n    <p>{`The response will look something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`{\"access_token\":\"yourAccessToken123asdf\",\"token_type\":\"bearer\",\"expires_in\":86399}\n`}</code></pre>\n    <p>{`The response includes an `}<inlineCode parentName=\"p\">{`\"expires_in\"`}</inlineCode>{` field indicating how long the access token is valid, in seconds. Each access token is valid for 24 hours. Then your secure server-side application will need to request a new token.`}</p>\n    <p>{`It's best to securely store the token and refresh it before it expires.`}</p>\n    <InlineAlert variant=\"help\" slots=\"header, text1\" mdxType=\"InlineAlert\" />\n    <p>{`Use standard OAuth2 libraries to automate token generation through the IMS endpoint.`}</p>\n    <p>{`To maximize security and efficiency, choose an OAuth 2.0 library that aligns with your application's needs. Since your projects likely use OAuth libraries already for other API integrations, leverage these same libraries to handle automatic token renewal.`}</p>\n    <p>{`With the access token ready, you can now `}<a parentName=\"p\" {...{\n        \"href\": \"/ff-services-docs/guides/quickstart\"\n      }}>{`make a call to the Reframe API`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}