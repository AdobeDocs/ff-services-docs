{"version":3,"file":"component---src-pages-firefly-api-guides-how-tos-create-your-first-ff-application-md-b0069cf201fef3f05876.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/firefly-api/guides/how-tos/create-your-first-ff-application.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"create-your-first-firefly-api-implementation\"\n    }}>{`Create your first Firefly API implementation`}</h1>\n    <p>{`A step-by-step guide to creating your first implementation with the Firefly APIs.`}</p>\n    <p>{`Adobe Firefly APIs offer a seamless way to integrate powerful creative workflows into your applications using a simple REST-based API. In this tutorial, you'll be guided through creating your first implementation using the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/V3/\"\n      }}>{`Firefly Generate Images API`}</a>{`.`}</p>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This tutorial provides code snippets in both `}<inlineCode parentName=\"p\">{`Node.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Python`}</inlineCode>{` for your convenience. Feel free to use the language of your choice to complete the implementation of your first Firefly API.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Before beginning, make sure you have the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Firefly API credentials. If you don't have them yet, first visit the Firefly Services `}<a parentName=\"li\" {...{\n          \"href\": \"../../../guides/get-started.md\"\n        }}>{`Getting Started`}</a>{` guide to obtain a `}<inlineCode parentName=\"li\">{`client_id`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`client_secret`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Node.js`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`Python`}</inlineCode>{` installed on your machine and basic familiarity with `}<inlineCode parentName=\"li\">{`JavaScript`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`Python`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"step-1-set-up-your-environment\"\n    }}>{`Step 1: Set Up Your Environment`}</h2>\n    <p>{`Begin by creating a new script, named `}<inlineCode parentName=\"p\">{`firefly.js`}</inlineCode>{` (or `}<inlineCode parentName=\"p\">{`firefly.py`}</inlineCode>{`), and save it anywhere on your computer. This will be the script used for testing your integration with the Firefly API endpoints.`}</p>\n    <p>{`Next, set your `}<inlineCode parentName=\"p\">{`client_id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`client_secret`}</inlineCode>{` as environment variables. For example, on a Mac or in Windows Subsystem for Linux (WSL), you can do the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export CLIENT_ID=YOURIDHERE\nexport CLIENT_SECRET=YOURSECRETHERE\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This tutorial assumes you have set these variables in uppercase (ie: `}<inlineCode parentName=\"p\">{`CLIENT_ID`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`CLIENT_SECRET`}</inlineCode>{`), and case matters.`}</p>\n    <h2 {...{\n      \"id\": \"step-2-authentication\"\n    }}>{`Step 2: Authentication`}</h2>\n    <p>{`Next, you will initialize a few variables. `}<strong parentName=\"p\">{`Note:`}</strong>{` It's crucial to have your environment variables set up from above prior to this step, as the following code relies on them:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* Set our creds based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-1\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`#Set our creds based on environment variables.\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n`}</code></pre>\n    <p>{`Now, these two variables will be used to make a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request to the authentication endpoint: `}<inlineCode parentName=\"p\">{`https://ims-na1.adobelogin.com/ims/token/v3`}</inlineCode>{`. You need to pass your credentials along with the requested scopes that allow for access to Firefly. All of this can be done in this simple function:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-2\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-3\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def getAccessToken(id, secret):\n    response = requests.post(f\"https://ims-na1.adobelogin.com/ims/token/v3?client_id={id}&client_secret={secret}&grant_type=client_credentials&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis\")\n    return response.json()[\"access_token\"]\n\ntoken = getAccessToken(CLIENT_ID, CLIENT_SECRET)\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The provided code example does not include error handling for credentials. For production code, it's essential to implement proper error handling to ensure the security and reliability of your application.`}</p>\n    <h2 {...{\n      \"id\": \"step-3-generate-an-image-with-a-prompt\"\n    }}>{`Step 3: Generate an Image with a Prompt`}</h2>\n    <p>{`For the demo, you will use Firefly to generate four images from a single prompt using the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/V3/\"\n      }}>{`Firefly Generate Images API`}</a>{`, which includes optional generative matching.`}</p>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/V3/\"\n      }}>{`Generate Images API`}</a>{` in the API Reference for more details.`}</p>\n    <p>{`Based on the docs, we can see that the only required parameter is prompt. Also, the `}<inlineCode parentName=\"p\">{`numVariations`}</inlineCode>{` prompt specifies how many images we want. So the simplest request body we could build would look like so:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n    \"prompt\":\"a cat dancing on a rainbow\",\n    \"numVariations\":4\n}\n`}</code></pre>\n    <p>{`Now, let's create a function to generate an image using a prompt.`}</p>\n    <p>{`First, we'll build a simple function to call the REST endpoint.\nIt requires our previous `}<inlineCode parentName=\"p\">{`client_id`}</inlineCode>{` value and the `}<inlineCode parentName=\"p\">{`access_token`}</inlineCode>{`, and our prompt:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-4\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function generateImage(prompt, id, token) {\n\n    let body = {\n        \"numVariations\":4,\n        prompt\n    }\n\n    let req = await fetch('https://firefly-api.adobe.io/v3/images/generate', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-5\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def generateImage(text, id, token):\n\n    data = {\n        \"prompt\":text,\n        \"numVariations\":4,\n    }\n\n    response = requests.post(\"https://firefly-api.adobe.io/v2/images/generate\", json=data, headers = {\n        \"X-API-Key\":id, \n        \"Authorization\":f\"Bearer {token}\",\n        \"Content-Type\":\"application/json\"\n    }) \n\n    return response.json()\n`}</code></pre>\n    <p>{`Please ensure you include the authentication headers correctly; pass the token in the `}<inlineCode parentName=\"p\">{`Authorization`}</inlineCode>{` header and the `}<inlineCode parentName=\"p\">{`client id`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`X-Api-Key`}</inlineCode>{` header. The API will return a JSON string for you to process and return to the caller.`}</p>\n    <h3 {...{\n      \"id\": \"executing-the-firefly-api-call\"\n    }}>{`Executing the Firefly API Call`}</h3>\n    <p>{`Next, define a simple prompt and call the function to interact with the Firefly API, displaying the result on the screen.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"3\" languages=\"JavaScript, PYTHON, JSON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-6\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let prompt = 'a cat dancing on a rainbow';\nlet result = await generateImage(prompt, CLIENT_ID, token);\nconsole.log(JSON.stringify(result, null, '\\\\t'));\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-7\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`prompt = \"a cat dancing on a rainbow\"\nresult = generateImage(prompt, CLIENT_ID, token)\nprint(json.dumps(result, indent=True))\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"response\"\n    }}>{`Response`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n \"size\": {\n  \"width\": 2048,\n  \"height\": 2048\n },\n \"outputs\": [\n  {\n   \"seed\": 295213121,\n   \"image\": {\n    \"uploadId\": \"014c2235-f2e9-47be-98a9-33bc9d62568b\",\n    \"url\": \"https://pre-signed-firefly.s3.amazonaws.com/images/014c2235-f2e9-47be-98a9-33bc9d62568b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA55EBG7KCZFCHQDZT%2F20240510%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240510T145429Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=a91dfaf608f5f539c80339778aa1bd45dc8698fc35bd32ba41e93d0d2e288632\"\n   }\n  },\n  {\n   \"seed\": 295109025,\n   \"image\": {\n    \"uploadId\": \"1c1ae898-0709-4a28-bb6d-1c677189a03b\",\n    \"url\": \"https://pre-signed-firefly.s3.amazonaws.com/images/1c1ae898-0709-4a28-bb6d-1c677189a03b?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA55EBG7KCZFCHQDZT%2F20240510%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240510T145429Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=88bf526592ef5e72e016619c470a346789403660933f05f523af467704ebb0b8\"\n   }\n  },\n  {\n   \"seed\": 779747824,\n   \"image\": {\n    \"uploadId\": \"e56845cd-bf6d-4242-b1db-2eb357c821a5\",\n    \"url\": \"https://pre-signed-firefly.s3.amazonaws.com/images/e56845cd-bf6d-4242-b1db-2eb357c821a5?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA55EBG7KCZFCHQDZT%2F20240510%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240510T145429Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=77d4b996909b04cfe1e892c12345f28d97b47a43e79bdf8ae91a36a87eac73a3\"\n   }\n  },\n  {\n   \"seed\": 1081574056,\n   \"image\": {\n    \"uploadId\": \"0985b3be-5961-409a-a6e5-8a31e44e6aed\",\n    \"url\": \"https://pre-signed-firefly.s3.amazonaws.com/images/0985b3be-5961-409a-a6e5-8a31e44e6aed?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIA55EBG7KCZFCHQDZT%2F20240510%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20240510T145429Z&X-Amz-Expires=3600&X-Amz-SignedHeaders=host&X-Amz-Signature=0fc4ff2e7b0545208fc5b08f1bb18d265b429166d0e0bfbe49b411aa01142bae\"\n   }\n  }\n ],\n \"photoSettings\": {\n  \"aperture\": 1.2,\n  \"shutterSpeed\": 0.0005,\n  \"fieldOfView\": 14\n },\n \"contentClass\": \"art\"\n}\n`}</code></pre>\n    <p>{`This function sends a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request to the Firefly API with the prompt, and retrieves the generated images. Replace `}<inlineCode parentName=\"p\">{`\"a cat dancing on a rainbow\"`}</inlineCode>{` with your desired prompt.`}</p>\n    <p>{`You can copy and paste any of the `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` values from the result to view the images.`}</p>\n    <h2 {...{\n      \"id\": \"step-4-downloading-images-from-firefly-api\"\n    }}>{`Step 4: Downloading Images from Firefly API`}</h2>\n    <p>{`Next, you will learn how to write a quick utility to download the resulting images.`}</p>\n    <h3 {...{\n      \"id\": \"import-the-required-modules\"\n    }}>{`Import the Required Modules`}</h3>\n    <p>{`First, import the necessary file-related modules and the requests modules for `}<inlineCode parentName=\"p\">{`Node`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Python`}</inlineCode>{`:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-8\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-9\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import requests \n`}</code></pre>\n    <h3 {...{\n      \"id\": \"define-the-downloadfile-function\"\n    }}>{`Define the `}<inlineCode parentName=\"h3\">{`downloadFile`}</inlineCode>{` function`}</h3>\n    <p>{`Next, create a function that takes a URL and a file path as arguments, and downloads the file from the URL to the specified path.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-10\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-11\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`def downloadFile(url, filePath):\n    with open(filePath,'wb') as output:\n        bits = requests.get(url, stream=True).content\n        output.write(bits)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"iterate-over-the-results-and-save-each-image\"\n    }}>{`Iterate over the results and save each image`}</h3>\n    <p>{`Finally, iterate over the results and save each image with a unique file name using the seed value from the result:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-12\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`for(let output of result.outputs) {\n    let fileName = \\`./\\${output.seed}.jpg\\`;\n    await downloadFile(output.image.url, fileName);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-13\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`for output in result[\"outputs\"]:\n    fileName = f'./{output[\"seed\"]}.jpg';\n    downloadFile(output[\"image\"][\"url\"], fileName);\n`}</code></pre>\n    <p>{`After running these steps, you'll see four images output in the same directory.`}</p>\n    <p><strong parentName=\"p\">{`Sample output`}</strong></p>\n    <p>{`A result of an image generated with the prompt specified above is shown here for reference.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"100%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/5530d/cat-rainbow.webp 320w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/0c8fb/cat-rainbow.webp 640w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/94b1e/cat-rainbow.webp 1280w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/0b34d/cat-rainbow.webp 1920w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/96d48/cat-rainbow.webp 2048w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/8980b/cat-rainbow.jpg 320w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/56d4e/cat-rainbow.jpg 640w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/62aaf/cat-rainbow.jpg 1280w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/aaf92/cat-rainbow.jpg 1920w\", \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/09658/cat-rainbow.jpg 2048w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/jpeg\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/0a2cba425e96a0679fe867f632570ae0/62aaf/cat-rainbow.jpg\",\n            \"alt\": \"a cat dancing on a rainbow\",\n            \"title\": \"a cat dancing on a rainbow\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <h2 {...{\n      \"id\": \"complete-source-code\"\n    }}>{`Complete Source Code`}</h2>\n    <p>{`Here's the entire code sample. As a reminder, feel free to modify and change the prompt.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"title, text\" mdxType=\"InlineAlert\" />\n    <p>{`IMPORTANT`}</p>\n    <p>{`Note that this Node.js code uses imports and top-level `}<inlineCode parentName=\"p\">{`await`}</inlineCode>{`, so you must either use the `}<inlineCode parentName=\"p\">{`.mjs`}</inlineCode>{` extension on your script file, or ensure you have a `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`type: \"module\"`}</inlineCode>{`.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"JavaScript, PYTHON\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"sample-code-14\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n\n/*\n  Set the creds based on environment variables.\n*/\nconst CLIENT_ID = process.env.CLIENT_ID;\nconst CLIENT_SECRET = process.env.CLIENT_SECRET;\n\n\nasync function getAccessToken(id, secret) {\n\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,firefly_enterprise,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1-stg1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nlet token = await getAccessToken(CLIENT_ID, CLIENT_SECRET);\n\nasync function generateImage(prompt, id, token) {\n\n    let body = {\n        \"numVariations\":4,\n        prompt\n    }\n\n    let req = await fetch('https://firefly-api.adobe.io/v3/images/generate', {\n        method:'POST',\n        headers: {\n            'X-Api-Key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await req.json();\n}\n\nlet prompt = 'a cat dancing on a rainbow';\nlet result = await generateImage(prompt, CLIENT_ID, token);\nconsole.log(JSON.stringify(result,null,'\\\\t'));\n\nasync function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n\nfor(let output of result.outputs) {\n    let fileName = \\`./\\${output.seed}.jpg\\`;\n    await downloadFile(output.image.url, fileName);\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"sample-code-15\"\n    }}>{`Sample code`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os \nimport requests \nimport json \n\n#Set our creds based on environment variables.\nCLIENT_ID = os.environ.get('CLIENT_ID')\nCLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n\ndef getAccessToken(id, secret):\n    response = requests.post(f\"https://ims-na1-stg1.adobelogin.com/ims/token/v3?client_id={id}&client_secret={secret}&grant_type=client_credentials&scope=openid,AdobeID,firefly_enterprise,firefly_api,ff_apis\")\n    return response.json()[\"access_token\"]\n\ntoken = getAccessToken(CLIENT_ID, CLIENT_SECRET)\n\ndef generateImage(text, id, token):\n\n    data = {\n        \"prompt\":text,\n        \"numVariations\":4,\n    }\n\n    response = requests.post(\"https://firefly-api.adobe.io/v3/images/generate\", json=data, headers = {\n        \"X-API-Key\":id, \n        \"Authorization\":f\"Bearer {token}\",\n        \"Content-Type\":\"application/json\"\n    }) \n\n    return response.json()\n\n\nprompt = \"a cat dancing on a rainbow\"\nresult = generateImage(prompt, CLIENT_ID, token)\nprint(json.dumps(result, indent=True))\n\ndef downloadFile(url, filePath):\n    with open(filePath,'wb') as output:\n            output.write(bits)\n\nfor output in result[\"outputs\"]:\n    fileName = f'./{output[\"seed\"]}.jpg'\n    downloadFile(output[\"image\"][\"url\"], fileName)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","mdx","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","variant","repeat","languages","isMDXComponent"],"sourceRoot":""}