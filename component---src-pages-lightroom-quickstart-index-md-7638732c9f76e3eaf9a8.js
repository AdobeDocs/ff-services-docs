"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9247],{3989:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return m}});var a=n(58168),s=n(80045),o=(n(88763),n(15680)),r=n(83407);const i=["components"],p={},c=(d="CodeBlock",function(e){return console.warn("Component "+d+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)});var d;const l={_frontmatter:p},u=r.A;function m(e){let{components:t}=e,n=(0,s.A)(e,i);return(0,o.mdx)(u,(0,a.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"quickstart-guide"},"Quickstart Guide"),(0,o.mdx)("p",null,"Modify your first Image with Lightroom APIs"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null}),(0,o.mdx)("th",{parentName:"tr",align:null}))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("span",{parentName:"td",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"707px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"150%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/5530d/autostraighten-input.webp 320w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/0c8fb/autostraighten-input.webp 640w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/36466/autostraighten-input.webp 707w"],sizes:"(max-width: 707px) 100vw, 707px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/8980b/autostraighten-input.jpg 320w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/56d4e/autostraighten-input.jpg 640w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/3bf56/autostraighten-input.jpg 707w"],sizes:"(max-width: 707px) 100vw, 707px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/3bf56/autostraighten-input.jpg",alt:"a crooked picture of a watch tower",title:"a crooked picture of a watch tower",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")," ",(0,o.mdx)("p",{style:{textAlign:"center"}},"Image")),(0,o.mdx)("td",{parentName:"tr",align:null},(0,o.mdx)("span",{parentName:"td",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"541px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"150%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/a0b78c7a2dd66bbd0ba5ffdb9c2975b2/5530d/autostraighten-output.webp 320w","/ff-services-docs/static/a0b78c7a2dd66bbd0ba5ffdb9c2975b2/9db5b/autostraighten-output.webp 541w"],sizes:"(max-width: 541px) 100vw, 541px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/a0b78c7a2dd66bbd0ba5ffdb9c2975b2/dd4a7/autostraighten-output.png 320w","/ff-services-docs/static/a0b78c7a2dd66bbd0ba5ffdb9c2975b2/a010c/autostraighten-output.png 541w"],sizes:"(max-width: 541px) 100vw, 541px",type:"image/png"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/a0b78c7a2dd66bbd0ba5ffdb9c2975b2/a010c/autostraighten-output.png",alt:"a straightened picture of a watch tower",title:"a straightened picture of a watch tower",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")," ",(0,o.mdx)("p",{style:{textAlign:"center"}},"Straightened Image"))))),(0,o.mdx)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.mdx)("h3",{id:"credentials"},"Credentials"),(0,o.mdx)("p",null,"If you don't already have a Lightroom or a Firefly Services ",(0,o.mdx)("strong",{parentName:"p"},"Client ID")," and ",(0,o.mdx)("strong",{parentName:"p"},"Client Secret"),", retrieve them from your ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/developer-console/docs/guides/services/services-add-api-oauth-s2s/#api-overview"},"Adobe Developer Console project")," before reading further. ",(0,o.mdx)("strong",{parentName:"p"},"Securely store these credentials and never expose them in client-side or public code.")),(0,o.mdx)("h3",{id:"set-up-your-environment"},"Set Up Your Environment"),(0,o.mdx)("p",null,"Before we begin this tutorial, run the following in a secure terminal:"),(0,o.mdx)(c,{slots:"heading, code",repeat:"2",languages:"Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"javascript"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"mkdir lightroom-api-auto-straighten-tutorial\ncd lightroom-api-auto-straighten-tutorial\nnpm init --y\nnpm install axios qs\ntouch index.js\n")),(0,o.mdx)("h4",{id:"python"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"mkdir lightroom-api-auto-straighten-tutorial\ncd lightroom-api-auto-straighten-tutorial\npython -m pip install requests\ntouch main.py\n")),(0,o.mdx)("h3",{id:"pre-signed-urls"},"Pre-signed URLs"),(0,o.mdx)("p",null,"To interact with Adobe's Lightroom APIs, you'll need to generate pre-signed URLs. These URLs grant temporary access to your storage resources without exposing your credentials. For more details about pre-signed URLs, see ",(0,o.mdx)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html"},"AWS Sharing objects with presigned URLs"),", or ",(0,o.mdx)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview"},"Azure Storage resources using shared access signatures"),"."),(0,o.mdx)("p",null,"In this tutorial, you will need:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"A pre-signed URL with a read token for the input image. Save this sample image to your cloud storage and generate a pre-signed URL: ",(0,o.mdx)("span",{parentName:"li",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"707px"}},"\n      ",(0,o.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"150%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,o.mdx)("picture",{parentName:"span"},"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/5530d/autostraighten-input.webp 320w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/0c8fb/autostraighten-input.webp 640w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/36466/autostraighten-input.webp 707w"],sizes:"(max-width: 707px) 100vw, 707px",type:"image/webp"}),"\n          ",(0,o.mdx)("source",{parentName:"picture",srcSet:["/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/8980b/autostraighten-input.jpg 320w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/56d4e/autostraighten-input.jpg 640w","/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/3bf56/autostraighten-input.jpg 707w"],sizes:"(max-width: 707px) 100vw, 707px",type:"image/jpeg"}),"\n          ",(0,o.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/ff-services-docs/static/58e9a6689a1a1f59062d1db15c1be01e/3bf56/autostraighten-input.jpg",alt:"a crooked picture of a watch tower",title:"a crooked picture of a watch tower",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,o.mdx)("li",{parentName:"ul"},"A pre-signed URL with a read/write token for the modified image.")),(0,o.mdx)("p",null,"Depending on your learning style, you may prefer to walk through this tutorial step-by-step or ",(0,o.mdx)("a",{parentName:"p",href:"#full-example"},"jump immediately to the full source code"),"."),(0,o.mdx)("h2",{id:"retrieve-an-access-token"},"Retrieve an Access Token"),(0,o.mdx)("p",null,"Open a secure terminal and ",(0,o.mdx)("inlineCode",{parentName:"p"},"export")," your ",(0,o.mdx)("strong",{parentName:"p"},"Client ID")," and ",(0,o.mdx)("strong",{parentName:"p"},"Client Secret")," as environment variables so that your later commands can access them:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"export CLIENT_ID=yourClientIdAsdf123\nexport CLIENT_SECRET=yourClientSecretAsdf123\n")),(0,o.mdx)("p",null,"Generate an access token:"),(0,o.mdx)(c,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"curl --location 'https://ims-na1.adobelogin.com/ims/token/v3' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode \"client_id=$CLIENT_ID\" \\\n--data-urlencode \"client_secret=$CLIENT_SECRET\" \\\n--data-urlencode 'scope=openid,AdobeID,read_organizations'\n")),(0,o.mdx)("h4",{id:"python-1"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"def retrieve_access_token():\n    client_id = os.environ['CLIENT_ID']\n    client_secret = os.environ['CLIENT_SECRET']\n\n    token_url = 'https://ims-na1.adobelogin.com/ims/token/v3'\n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'openid,AdobeID,read_organizations'\n    }\n\n    response = requests.post(token_url, data=payload)\n    response.raise_for_status()\n    token_data = response.json()\n    return token_data\n")),(0,o.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"async function retrieveAccessToken() {\n  const data = qs.stringify({\n    grant_type: 'client_credentials',\n    client_id: process.env.CLIENT_ID,\n    client_secret: process.env.CLIENT_SECRET,\n    scope: 'openid,AdobeID,read_organizations',\n  });\n\n  const config = {\n    method: 'post',\n    url: 'https://ims-na1.adobelogin.com/ims/token/v3',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    data: data,\n  };\n\n  const response = await axios.request(config);\n  return response.data;\n}\n")),(0,o.mdx)("p",null,"The response will look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{"access_token":"yourAccessTokenAsdf123","token_type":"bearer","expires_in":86399}\n')),(0,o.mdx)("p",null,"Export this access token in your secure terminal so that the next script can conveniently access it:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"export ACCESS_TOKEN=yourAccessTokenAsdf123\n")),(0,o.mdx)("h2",{id:"auto-straighten"},"Auto Straighten"),(0,o.mdx)("p",null,"Next, call the ",(0,o.mdx)("a",{parentName:"p",href:"../api/lightroom_autoStraighten.md"},"Lightroom Auto Straighten API"),":"),(0,o.mdx)(c,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl-1"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},'curl --location \'https://image.adobe.io/lrService/autoStraighten\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: application/json\' \\\n--header "x-api-key: $LIGHTROOM_CLIENT_ID" \\\n--header "Authorization: Bearer $LIGHTROOM_ACCESS_TOKEN" \\\n--data \'{\n    "inputs":{\n      "href":"https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...",\n      "storage":"azure"\n    },\n    "outputs":[{\n      "href":"https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...",\n      "storage":"azure",\n      "type":"image/jpeg"\n    }]\n  }\'\n')),(0,o.mdx)("h4",{id:"python-2"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"# Replace with your actual pre-signed URLs and storage option\nSIGNED_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'\nSIGNED_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'\nSTORAGE = 'azure'  # e.g., 'external', 'azure'\n\ndef auto_straighten(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'inputs': {\n            'href': SIGNED_GET_URL,\n            'storage': STORAGE\n        },\n        'outputs': [{\n            'href': SIGNED_POST_URL,\n            'storage': STORAGE,\n            'type': 'image/jpeg'\n        }]\n    }\n\n    response = requests.post('https://image.adobe.io/lrService/autoStraighten', headers=headers, json=data)\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Auto Straighten Job Submitted:\", job_response)\n    return job_response\n")),(0,o.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const SIGNED_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...';\nconst SIGNED_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...';\nconst STORAGE = 'azure';  //e.g., 'external', 'azure'\n\nasync function autoStraighten(accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    inputs: { href: SIGNED_GET_URL, storage: STORAGE },\n    outputs: [{ href: SIGNED_POST_URL, storage: STORAGE, type: 'image/jpeg' }],\n  };\n\n  const config = {\n    method: 'post',\n    url: 'https://image.adobe.io/lrService/autoStraighten',\n    headers: headers,\n    data: data,\n  };\n\n  const response = await axios.request(config);\n  console.log('Auto Straighten Job Submitted:', response.data);\n  return response.data;\n}\n")),(0,o.mdx)("p",null,"The response will look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "_links": {\n    "self": {\n      "href": "https://image.adobe.io/lrService/status/<:jobId>"\n    }\n  }\n}\n')),(0,o.mdx)("h2",{id:"get-status"},"Get Status"),(0,o.mdx)("p",null,"Next up, we will use the ",(0,o.mdx)("a",{parentName:"p",href:"../api/lightroom_getStatus.md"},"Get Status")," endpoint to monitor the job status until it completes."),(0,o.mdx)(c,{slots:"heading, code",repeat:"3",languages:"bash, Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"curl-2"},"cURL"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"curl --location 'https://image.adobe.io/lrService/status/<:jobId>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header \"x-api-key: $CLIENT_ID\" \\\n--header \"Authorization: Bearer $ACCESS_TOKEN\" \n")),(0,o.mdx)("h4",{id:"python-3"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"def check_job_status(job_id, access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}',\n    }\n\n    status_url = f'https://image.adobe.io/lrService/status/{job_id}'\n    response = requests.get(status_url, headers=headers)\n    response.raise_for_status()\n    return response.json()\n")),(0,o.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"async function checkJobStatus(jobId, accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const url = `https://image.adobe.io/lrService/status/${jobId}`;\n\n  try {\n    const response = await axios.get(url, { headers: headers });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error checking job status:\", error);\n  }\n}\n")),(0,o.mdx)("p",null,"A successful response looks like:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "jobId": "38ae54a3-6961-43fa-914f-111111111",\n    "created": "2024-11-28T23:07:01.264Z",\n    "modified": "2024-11-28T23:07:03.036Z",\n    "_links": {\n        "self": {\n            "href": "https://image.adobe.io/lrService/status/38ae54a3-6961-43fa-914f-111111111"\n        }\n    },\n    "outputs": [\n        {\n            "input": "https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...",\n            "status": "succeeded",\n            "_links": {\n                "self": {\n                    "href": "https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...",\n                    "storage": "azure"\n                }\n            }\n        }\n    ]\n}\n')),(0,o.mdx)("h2",{id:"view-modified-image"},"View Modified Image"),(0,o.mdx)("p",null,"Access the straightened at the ",(0,o.mdx)("inlineCode",{parentName:"p"},"outputs[0]._links.self.href")," URL (the ",(0,o.mdx)("inlineCode",{parentName:"p"},"SIGNED_POST_URL")," provided earlier). 🎉"),(0,o.mdx)("h2",{id:"full-example"},"Full Example"),(0,o.mdx)("p",null,"You can review the ",(0,o.mdx)("a",{parentName:"p",href:"#prerequisites"},"prerequisites")," section to understand how to set up your environment prior to running this code. Note that this is an example only and is not production-ready and requires additional error handling, logging, security measures, and more before you can run it at scale in a live application."),(0,o.mdx)(c,{slots:"heading, code",repeat:"2",languages:"Python, JavaScript",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"python-4"},"Python"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"import os\nimport time\nimport requests\n\n# Replace with your actual pre-signed URLs and storage option\nSIGNED_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'  # Input image URL\nSIGNED_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'  # Output image URL\nSTORAGE = 'azure'  # e.g., 'external', 'azure'\n\ndef main():\n    access_token = retrieve_access_token()\n    job_response = auto_straighten(access_token)\n    job_id = job_response['_links']['self']['href'].split('/')[-1]\n    check_job_status(job_id, access_token)\n\ndef retrieve_access_token():\n    client_id = os.environ['CLIENT_ID']\n    client_secret = os.environ['CLIENT_SECRET']\n\n    token_url = 'https://ims-na1.adobelogin.com/ims/token/v3'\n    payload = {\n        'grant_type': 'client_credentials',\n        'client_id': client_id,\n        'client_secret': client_secret,\n        'scope': 'openid,AdobeID,read_organizations'\n    }\n\n    response = requests.post(token_url, data=payload)\n    response.raise_for_status()\n    token_data = response.json()\n    print(\"Access Token Retrieved\")\n    return token_data['access_token']\n\ndef auto_straighten(access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    data = {\n        'inputs': {\n            'href': SIGNED_GET_URL,\n            'storage': STORAGE\n        },\n        'outputs': [{\n            'href': SIGNED_POST_URL,\n            'storage': STORAGE,\n            'type': 'image/jpeg'\n        }]\n    }\n\n    response = requests.post('https://image.adobe.io/lrService/autoStraighten', headers=headers, json=data)\n    response.raise_for_status()\n    job_response = response.json()\n    print(\"Auto Straighten Job Submitted:\", job_response)\n    return job_response\n\ndef check_job_status(job_id, access_token):\n    headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'x-api-key': os.environ['CLIENT_ID'],\n        'Authorization': f'Bearer {access_token}'\n    }\n\n    url = f'https://image.adobe.io/lrService/status/{job_id}'\n\n    status = 'submitted'\n    while status not in ['succeeded', 'failed']:\n        time.sleep(5)  # Wait for 5 seconds\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        status_response = response.json()\n        status = status_response.get('outputs', [{}])[0].get('status')\n        print(f'Job Status: {status}')\n\n    if status == 'succeeded':\n        print('Auto straighten completed successfully!')\n        print('You can access the modified image at your SIGNED_POST_URL.')\n    else:\n        print('Auto straighten failed.')\n\nif __name__ == '__main__':\n    main()\n")),(0,o.mdx)("h4",{id:"javascript-4"},"JavaScript"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-js"},"const axios = require('axios');\nconst qs = require('qs');\n\nconst SIGNED_GET_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'; // Input image URL\nconst SIGNED_POST_URL = 'https://your-storage-bucket-name.blob.core.windows.net:443/images/asdf-12345?lots=of&query=params...'; // Output image URL\nconst STORAGE = 'azure'; // e.g., 'external', 'azure'\n\n(async () => {\n  const accessToken = await retrieveAccessToken();\n  const jobResponse = await autoStraighten(accessToken);\n  const jobId = jobResponse._links.self.href.split('/').pop();\n  await checkJobStatus(jobId, accessToken);\n})();\n\nasync function retrieveAccessToken() {\n  const data = qs.stringify({\n    grant_type: 'client_credentials',\n    client_id: process.env.CLIENT_ID,\n    client_secret: process.env.CLIENT_SECRET,\n    scope: 'openid,AdobeID,read_organizations',\n  });\n\n  const config = {\n    method: 'post',\n    url: 'https://ims-na1.adobelogin.com/ims/token/v3',\n    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    data: data,\n  };\n\n  const response = await axios.request(config);\n  console.log('Access Token Retrieved');\n  return response.data.access_token;\n}\n\nasync function autoStraighten(accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const data = {\n    inputs: { href: SIGNED_GET_URL, storage: STORAGE },\n    outputs: [{ href: SIGNED_POST_URL, storage: STORAGE, type: 'image/jpeg' }],\n  };\n\n  const config = {\n    method: 'post',\n    url: 'https://image.adobe.io/lrService/autoStraighten',\n    headers: headers,\n    data: data,\n  };\n\n  const response = await axios.request(config);\n  console.log('Auto Straighten Job Submitted:', response.data);\n  return response.data;\n}\n\nasync function checkJobStatus(jobId, accessToken) {\n  const headers = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-api-key': process.env.CLIENT_ID,\n    Authorization: `Bearer ${accessToken}`,\n  };\n\n  const url = `https://image.adobe.io/lrService/status/${jobId}`;\n\n  let status = 'submitted';\n  while (status !== 'succeeded' && status !== 'failed') {\n    await new Promise((resolve) => setTimeout(resolve, 5000)); // Wait for 5 seconds\n    const response = await axios.get(url, { headers: headers });\n    status = response.data.outputs[0].status;\n    console.log(`Job Status: ${status}`);\n  }\n\n  if (status === 'succeeded') {\n    console.log('Auto straighten completed successfully!');\n    console.log('You can access the modified image at your SIGNED_POST_URL.');\n  } else {\n    console.error('Auto straighten failed.');\n  }\n}\n")),(0,o.mdx)("h2",{id:"deepen-your-understanding"},"Deepen Your Understanding"),(0,o.mdx)("p",null,"Explore more Lightroom API options in our ",(0,o.mdx)("a",{parentName:"p",href:"../code-sample"},"Lightroom Tutorials")," 🚀"))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-lightroom-quickstart-index-md-7638732c9f76e3eaf9a8.js.map