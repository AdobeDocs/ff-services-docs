{"version":3,"file":"component---src-pages-firefly-api-guides-concepts-authentication-index-md-967ae2c11296d63265d0.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/firefly-api/guides/concepts/authentication/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"authentication\"\n    }}>{`Authentication`}</h1>\n    <p>{`Server-to-server authentication credentials lets your application’s server generate access tokens and make API calls on behalf of your application. This is sometimes referred to as “two-legged OAuth”.`}</p>\n    <p>{`For your application to generate an access token, an end-user does not need to sign in or provide consent to your application. Instead, your application can use its credentials (client id and secrets) to authenticate itself and generate access tokens. Your application can then use the generated access token to call Adobe API and services on its behalf.`}</p>\n    <h2 {...{\n      \"id\": \"access-tokens\"\n    }}>{`Access tokens`}</h2>\n    <p>{`Each access token is valid for 24 hours. To adhere with OAuth best practices, you should generate a new token every 23 hours. Generating access tokens can be accomplished either directly from the Developer Console UI or programmatically.`}</p>\n    <p>{`To generate access tokens programmatically, send a POST request to the following endpoint:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST 'https://ims-na1.adobelogin.com/ims/token/v3' \\\\\n-H 'Content-Type: application/x-www-form-urlencoded' \\\\\n-d 'grant_type=client_credentials&client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&scope=openid,AdobeID,session,additional_info,read_organizations,firefly_api,ff_apis'\n`}</code></pre>\n    <p>{`The required parameters are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`client_id`}</inlineCode>{`: Client ID from Console`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`client_secret`}</inlineCode>{`: Client secret from Console`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`scope`}</inlineCode>{`: `}<inlineCode parentName=\"li\">{`firefly_api`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`ff_apis`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`openid`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`AdobeID`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`session`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`additional_info`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`read_organizations`}</inlineCode></li>\n    </ul>\n    <p>{`Automate your token generation by calling the IMS endpoint above using standard OAuth2 libraries. Using industry-standard libraries is the quickest and most secure way of integrating with OAuth. We recommend developers diligently pick the OAuth 2.0 library that works best for their application. Your teams' projects are likely leveraging OAuth libraries already to connect with other APIs. Use these libraries to automatically generate tokens when they expire.`}</p>\n    <p>{`The token endpoint also returns an expiry date and the token itself (when decoded) contains the expiry time.`}</p>\n    <h2 {...{\n      \"id\": \"client-secrets\"\n    }}>{`Client secrets`}</h2>\n    <p>{`You can rotate your client secret as needed, according to your company’s security posture/compliance. For some, this means rotating client secrets every few months. For others, this may mean rotating secrets every day.`}</p>\n    <p>{`Rotating your secret is highly recommended in case of a leak or unauthorized access. Furthermore, rotating client secrets periodically is an industry-standard practice that strengthens your application security posture. Similar to access tokens, you can rotate your client secret in the Developer Console UI or using an API.`}</p>\n    <p>{`Org admins: Navigate to your project in Adobe Developer Console. Click the `}<strong parentName=\"p\">{`Add to Project`}</strong>{` button and select `}<strong parentName=\"p\">{`API`}</strong>{` > add `}<strong parentName=\"p\">{`I/O Management API`}</strong>{` to your project. This API will allow your credential to read, delete, and generate new client secrets. You will need to configure the credential name before saving it.`}</p>\n    <p>{`In order to successfully rotate secrets without contacting the org admin, developers will need the following:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`orgId`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`projectId`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`credentialId`}</inlineCode></li>\n      <li parentName=\"ul\">{`Access token`}</li>\n    </ul>\n    <p>{`Navigate to the OAuth server-to-server credential overview page. Copy the `}<inlineCode parentName=\"p\">{`orgId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`projectId`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`credentialId`}</inlineCode>{` from the URL by comparing it to the templated URL below:`}</p>\n    <p><strong parentName=\"p\"><a parentName=\"strong\" {...{\n          \"href\": \"https://developer.adobe.com/console/projects/%7BorgId%7D/%7BprojectId%7D/credentials/%7BcredentialId%7D/details/oauthservertoserver\"\n        }}>{`https://developer.adobe.com/console/projects/{orgId}/{projectId}/credentials/{credentialId}/details/oauthservertoserver`}</a></strong></p>\n    <p>{`Next, you need an access token. To generate an access token, use the following command. Make sure to include scopes that the I/O Management API requires in the `}<inlineCode parentName=\"p\">{`scope`}</inlineCode>{` parameter:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST 'https://ims-na1.adobelogin.com/ims/token/v3' \\\\\n-H 'Content-Type: application/x-www-form-urlencoded'\n-d 'client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&grant_type=client_credentials&scope=AdobeID,openid,read_organizations,additional_info.projectedProductContext,additional_info.roles,adobeio_api,read_client_secret,manage_client_secrets'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"list-all-secrets\"\n    }}>{`List all secrets`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X GET 'https://api.adobe.io/console/organizations/{orgId}/credentials/{credentialId}/secrets' \\\\\n     -H 'Authorization: Bearer {ACCESS_TOKEN}' \\\\\n     -H 'x-api-key: {CLIENT_ID}'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-new-secret\"\n    }}>{`Generate new secret`}</h3>\n    <p>{`Make the following request. The API response will contain the `}<inlineCode parentName=\"p\">{`client_secret`}</inlineCode>{` that was added to the project and its `}<inlineCode parentName=\"p\">{`uuid`}</inlineCode>{`. You can find it again later on the Developer Console UI. After you generate a new secret, update your application to use the new secret.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST 'https://api.adobe.io/console/organizations/{orgId}/credentials/{credentialId}/secrets' \\\\\n     -H 'Authorization: Bearer {ACCESS TOKEN}' \\\\\n     -H 'x-api-key: {CLIENT ID}'\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-a-secret\"\n    }}>{`Delete a secret`}</h3>\n    <p>{`To delete a secret, first call the API to list all client secrets for your credential. Grab the value of the `}<inlineCode parentName=\"p\">{`uuid`}</inlineCode>{` field for your older secret that you wish to delete. Call the following API to delete the old `}<inlineCode parentName=\"p\">{`client_secret`}</inlineCode>{` from your credential by passing the `}<inlineCode parentName=\"p\">{`uuid`}</inlineCode>{` in the URL.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X DELETE 'https://api.adobe.io/console/organizations/{orgId}/credentials/{credentialId}/secrets/{uuid}' \\\\\n     -H 'Authorization: Bearer {ACCESS TOKEN}' \\\\\n     -H 'x-api-key: {CLIENT ID}'\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Once a client secret is deleted, you cannot restore it. So be extra sure you have replaced the old client secret with the new one in all locations.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}