{"version":3,"file":"component---src-pages-indesign-apis-how-tos-writing-scripts-for-custom-scripts-api-index-md-8e1752e4219a0f4be8c8.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/indesign-apis/how-tos/writing-scripts-for-custom-scripts-api/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"writing-scripts-for-the-custom-scripts-api\"\n    }}>{`Writing Scripts for the Custom Scripts API`}</h1>\n    <p>{`Use this document to construct the script files for the Custom Scripts API.`}</p>\n    <p>{`The script's author defines the custom attributes and values for a particular endpoint using `}<em parentName=\"p\">{`script.js`}</em>{` files in the custom script bundle`}<a parentName=\"p\" {...{\n        \"href\": \"../../concepts/index.md#Custom-Script-bundle-structure\"\n      }}>{`1`}</a>{`. Refer to the examples below to construct your scripts.`}</p>\n    <h2 {...{\n      \"id\": \"including-input-in-a-custom-script\"\n    }}>{`Including input in a custom script`}</h2>\n    <h3 {...{\n      \"id\": \"when-no-input-is-required\"\n    }}>{`When no input is required`}</h3>\n    <p>{`The system, by default, sends a string-type argument named `}<inlineCode parentName=\"p\">{`\"params\"`}</inlineCode>{`, which needs to be parsed inside the script to retrieve the values of the attributes.`}</p>\n    <p>{`In this case the `}<inlineCode parentName=\"p\">{`\"params\"`}</inlineCode>{` attribute will be empty, since the script doesn't need an argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"assets\": [\n        {\"path\": \"doc.indd\"},\n        {\"path\": \"image.pdf\"},\n        ...\n    ],\n    \"params\": {\n\n    },\n    \"jobID\": \"0c531425-bc82-43c0-89b7-0e851cd56061\",\n    \"workingFolder\": <Some path>\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"when-input-is-included-in-the-request\"\n    }}>{`When input is included in the request`}</h3>\n    <p>{`The system, by default, sends a string-type argument named `}<inlineCode parentName=\"p\">{`\"params\"`}</inlineCode>{` which also includes input arguments `}<inlineCode parentName=\"p\">{`\"arg1\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`\"arg2\"`}</inlineCode>{`.`}</p>\n    <p>{`To use the argument, `}<inlineCode parentName=\"p\">{`\"params\"`}</inlineCode>{` must be parsed by the script and the value of `}<inlineCode parentName=\"p\">{`arg1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`arg2`}</inlineCode>{` must be extracted.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"assets\": [\n        {\"path\":\"doc.indd\"},\n        {\"path\":\"image.pdf\"},\n        ...\n    ],\n    \"params\": {\n        \"arg1\": <data for argument 1>,\n        \"arg2\": <data for argument 2>,\n        ...\n    },\n    \"jobID\": \"0c531425-bc82-43c0-89b7-0e851cd56061\",\n    \"workingFolder\": <Some path>\n}\n`}</code></pre>\n    <p>{`The existing scripts must be tweaked to accept the arguments correctly:`}</p>\n    <p><strong parentName=\"p\">{`Previous existing script`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var arg1 = app.scriptArgs.get('argument1')\nvar arg2 = app.scriptArgs.get('argument2')\n// Some processing\n`}</code></pre>\n    <p><strong parentName=\"p\">{`New correct script`}</strong>{`  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var parameters = app.scriptArgs.get('parameters')\nvar arg1 = parameters['argument1']\nvar arg2 = parameters['argument2']\n// Some processing\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"input-examples\"\n    }}>{`Input examples`}</h3>\n    <p>{`For example, below is a sample input and sample script code to open a document and close a document:`}</p>\n    <p><strong parentName=\"p\">{`Example input request body`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"assets\": [\n        {\n            \"source\": {\n                \"storageType\": \"Azure\",\n                \"url\": \"<Pre-signed URL of the document>\"\n            },\n            \"destination\": \"doc.indd\"\n        }\n    ],\n    \"params\": {\n        \"targetDocument\": \"doc.indd\"\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Transformed input request sent to the script`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"assets\": [\n        {\n            \"path\": \"doc.indd\"\n        }\n    ],\n    \"params\": {\n        \"targetDocument\": \"doc.indd\"\n    },\n    \"jobID\": \"0c531425-bc82-43c0-89b7-0e851cd56061\",\n    \"workingFolder\": \"c:\\\\\\\\baseFolder\\\\\\\\assets\"\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Sample code that takes the input (from above)`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  \n    var input = app.scriptArgs.get('parameters')\n    var allParameters = JSON.parse(input)\n\n    // Set the working folder, which manages all the input and output assets.\n    var basePath = allParameters[\"workingFolder\"]\n\n    var documentToOpen = allParameters[\"params\"][\"targetDocument\"]\n\n    documentPath = basePath + \"\\\\\\\\\" + documentToOpen\n    document = app.open(File(documentPath))\n    document.close()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"providing-output-from-a-custom-script\"\n    }}>{`Providing output from a custom script`}</h2>\n    <p>{`Use the information below to output data, files, or logs correctly from a script.`}</p>\n    <h3 {...{\n      \"id\": \"if-an-execution-is-successful\"\n    }}>{`If an execution is successful`}</h3>\n    <p>{`The attributes below are expected to be returned as a JSON string if the script execution is successful.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"title, text\" mdxType=\"InlineAlert\" />\n    <p><strong parentName=\"p\">{`Caution:`}</strong></p>\n    <p>{`Anything outside of these attributes might be logged as data to be investigated.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`dataURL`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A relative path to the JSON data file inside the working folder. When there is no data to send, pass an empty string.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`X`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`status`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Status of the execution. Can be `}<inlineCode parentName=\"td\">{`SUCCESS`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`FAILURE`}</inlineCode>{`.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`X`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`assetToBeUploaded`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An array for assets that need to be uploaded. Each asset is an object with a `}<inlineCode parentName=\"td\">{`path`}</inlineCode>{` and `}<inlineCode parentName=\"td\">{`data`}</inlineCode>{` attribute. The `}<inlineCode parentName=\"td\">{`path`}</inlineCode>{` is a relative link for the file to be uploaded. The `}<inlineCode parentName=\"td\">{`data`}</inlineCode>{` is the data in dictionary (object) format to be associated with this asset. This can be empty.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`X`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"status\": \"SUCCESS\",\n    \"assetToBeUploaded\": [\n        {\n            \"path\": <Relative path of the file to be uploaded>,\n            \"data\": <Data associated with this asset>\n        }\n    ],\n    \"dataURL\": <Relative path of the JSON data file>\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"output-examples\"\n    }}>{`Output examples`}</h3>\n    <p>{`In these examples the data is shared in a JSON file, not directly. This is ideal for cases where the data becomes too big to send back.`}</p>\n    <p><strong parentName=\"p\">{`Example without data and without any output file`}</strong></p>\n    <p>{`This creates an object to be returned when the job is successful. The object should be stringified before returning.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\nfunction GetSuccessReturnObj() {\n    var obj = {}\n    \n    obj.status = 'SUCCESS'\n    obj.assetsToBeUploaded = []\n    obj.dataURL = ''\n    \n    return JSON.stringify(obj)\n\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example with data and without any output file`}</strong></p>\n    <p>{`  This creates an object to be returned when the job is successful. Data is written into a JSON file, which should be created in a working folder.`}</p>\n    <p>{`  The data in dictionary (object) format is to be returned. The object should be stringified before returning.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function GetSuccessReturnObj(data) {\n  var obj = {}\n  \n  obj.status = 'SUCCESS'\n  obj.assetsToBeUploaded = []\n  obj.dataURL = WriteToFile(data)\n  \n  return JSON.stringify(obj)\n}\nfunction WriteToFile ( data ) {\n  var newFile\n  var fileName = 'data.json'\n  var filePath = workingFolder + '\\\\\\\\' + fileName\n  newFile = File(filePath)\n  newFile.encoding = 'UTF8'\n  newFile.open('write')\n  newFile.write(JSON.stringify(data))\n  newFile.close()\n  return filePath  \n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example with data and with the output file`}</strong></p>\n    <p>{`  This creates an array of assets to be uploaded and sent back to the caller.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`assetPath`}</inlineCode>{`: The path of the file to be uploaded, relative to the working folder.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`data`}</inlineCode>{`: The data in dictionary (object) format to be associated with this asset. (It's optional).`}</p>\n        <p parentName=\"li\">{`This data will be provided to the user with an  `}<inlineCode parentName=\"p\">{`ASSET_UPLOAD_COMPLETED`}</inlineCode>{`  event.`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\n  var assets = []\n  var assetToBeUploaded = {}\n  \n  assetToBeUploaded.path = assetPath\n  assetToBeUploaded.data = data //this is optional\n  assets.push(assetToBeUploaded)\n  \n  \n  function GetSuccessReturnObj(assets, data) {\n    var obj = {}\n    obj.status = 'SUCCESS'\n    obj.assetsToBeUploaded = assets\n    if (data) {\n        obj.dataURL = WriteToFile(data)\n    } else {\n        obj.dataURL = ''\n    }\n    return JSON.stringify(obj)\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-an-execution-fails\"\n    }}>{`If an execution fails`}</h3>\n    <p>{`When a script execution fails, the following attributes are returned as a JSON string.`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Output Request Mapping`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`status`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Status of execution. Will be `}<inlineCode parentName=\"td\">{`SUCCESS`}</inlineCode>{` or `}<inlineCode parentName=\"td\">{`FAILURE`}</inlineCode>{`.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`X`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`errorCode`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The error code.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`errorString`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A description of the error.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"status\": \"FAILURE\",\n    \"errorCode\": <Error code>,\n    \"errorString\": <Error Message>,\n}\n`}</code></pre>\n    <p>{`Use the code block below as a starting point to create the returned object for failed cases.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorCode`}</inlineCode>{`: Error code detail.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorString`}</inlineCode>{`: Description about the error.`}</li>\n    </ul>\n    <p>{`Returns the object as a JSON string.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function GetFailureReturnObj(errorCode, errorString) {\n    var obj = {}\n    obj.status = 'FAILURE'\n    obj.errorCode = errorCode\n    obj.errorString = errorString\n    return JSON.stringify(obj)\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sample-scripts\"\n    }}>{`Sample Scripts`}</h2>\n    <p>{`To help you get started with writing custom scripts for the Custom Scripts API, we have created a collection of sample scripts. These scripts demonstrate various use cases and best practices for constructing custom script bundles and handling input/output in your scripts. The repository includes scripts in both Extendscript and UXP formats.`}</p>\n    <p>{`You can find the sample scripts on our GitHub repository: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/indesign-api-docs/tree/main/SampleScripts\"\n      }}>{`Sample Scripts for Custom Scripts API`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}