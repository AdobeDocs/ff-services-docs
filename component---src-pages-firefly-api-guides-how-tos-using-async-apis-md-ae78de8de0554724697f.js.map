{"version":3,"file":"component---src-pages-firefly-api-guides-how-tos-using-async-apis-md-ae78de8de0554724697f.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/firefly-api/guides/how-tos/using-async-apis.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/ff-services-docs/ff-services-docs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-the-asynchronous-adobe-firefly-apis\"\n    }}>{`Using the Asynchronous Adobe Firefly APIs`}</h1>\n    <p>{`With our launch of new asynchronous APIs, you can manage your Firefly requests and responses more efficiently.`}</p>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <p>{`Our original Firefly APIs operated in a synchronous fashion. This meant that you could call the API with a given text prompt and generate an image, however Firefly platform delayed returning the response until it generated your assets. If you're not already familiar with our standard, synchronous APIs, see our `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md\"\n      }}>{`Quickstart Guide`}</a>{`.`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"672px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"57.1875%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/5530d/bearsdancingforest.webp 320w\", \"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/0c8fb/bearsdancingforest.webp 640w\", \"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/42a33/bearsdancingforest.webp 672w\"],\n            \"sizes\": \"(max-width: 672px) 100vw, 672px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/8980b/bearsdancingforest.jpg 320w\", \"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/56d4e/bearsdancingforest.jpg 640w\", \"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/a7b22/bearsdancingforest.jpg 672w\"],\n            \"sizes\": \"(max-width: 672px) 100vw, 672px\",\n            \"type\": \"image/jpeg\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/ff-services-docs/static/98354dcc6dc2328b07b1a745f8114a5a/a7b22/bearsdancingforest.jpg\",\n            \"alt\": \"bears in dresses dancing\",\n            \"title\": \"bears in dresses dancing\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`Currently, the async operations include:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../api/image_generation/V3_Async/\"\n        }}>{`Generate Image Async`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../api/generative_expand/V3_Async/\"\n        }}>{`Expand Image Async`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../api/generative_fill/V3_Async/\"\n        }}>{`Fill Image Async`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../api/generate-object-composite/V3_Async/\"\n        }}>{`Generate Object Composite Async`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../api/generate-similar/V3_Async/\"\n        }}>{`Generate Similar Images Async`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"sequence-of-calls\"\n    }}>{`Sequence of Calls`}</h2>\n    <p>{`The workflow for each of these is the same:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Make a request, and send any required and optional arguments.`}</li>\n      <li parentName=\"ul\">{`Firefly responds and returns a job ID that includes a URL. Use the ID and URL to check the status of your request or to cancel the job.`}</li>\n      <li parentName=\"ul\">{`Check on the job, with scheduled requests for a time reasonable time period. For example, check once every second and wait for a success or failure message.`}</li>\n      <li parentName=\"ul\">{`On success, Firefly sends you a result containing URLs.`}</li>\n      <li parentName=\"ul\">{`Retrieve your assets from the URL.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"generating-images-with-the-async-api\"\n    }}>{`Generating Images with the Async API`}</h2>\n    <p>{`Start with this example that uses the asynchronous version of the text to image endpoint, see `}<a parentName=\"p\" {...{\n        \"href\": \"../api/image_generation/V3_Async/\"\n      }}>{`Generate Image Async API Reference`}</a>{`. For now we won't show authentication which is the same as it is for synchronous calls.`}</p>\n    <p>{`In terms of required and optional arguments, you have the same options that you do with the synchronous endpoint. At minimum, you should send a text prompt; beyond that, you can send optional arguments to help Firefly create the final result. This includes the content class as well as structure and style options. In fact, the only real change to the code for your request beyond what you already do for synchronous requests is to sent it to a different endpoint:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let BASE = 'https://firefly-api.adobe.io';\n\nasync function asyncTextToImage(prompt, contentClass='photo', id, token) {\n\n    let body = {\n        prompt, \n        contentClass\n    }\n\n    let resp = await fetch(\\`\\${BASE}/v3/images/generate-async\\`, {\n        method:'POST',\n        headers: {\n            'x-api-key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await resp.json();\n\n}\n`}</code></pre>\n    <p>{`This simple `}<inlineCode parentName=\"p\">{`Node.js`}</inlineCode>{` wrapper calls the endpoint and helps you to pass a text prompt and a content class. As mentioned earlier, you have a whole set of other options you can change as well.`}</p>\n    <p>{`The main difference now is the response. With the synchronous version, this method waited while Firefly generated your images. Now, on success, you get a rapid response that looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"jobId\": \"urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-568ca8fc36ac\",\n  \"statusUrl\": \"https://firefly-api.adobe.io/v3/status/urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-568ca8fc36ac\",\n  \"cancelUrl\": \"https://firefly-api.adobe.io/v3/cancel/urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-568ca8fc36ac\"\n}\n`}</code></pre>\n    <p>{`In your code, you can use `}<inlineCode parentName=\"p\">{`statusUrl`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`cancelUrl`}</inlineCode>{` to get the latest status of your request or to cancel the request. If you want, you can also use `}<inlineCode parentName=\"p\">{`jobId`}</inlineCode>{` for logging. Here's an example function that repeatedly polls `}<inlineCode parentName=\"p\">{`statusUrl`}</inlineCode>{` to see when Firefly completes the job:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function pollJob(jobUrl, id, token) {\n    let status = '';\n\n    while(status !== 'succeeded' && status !== 'failed') {\n\n        let resp = await fetch(jobUrl, {\n            headers: {\n                'Authorization':\\`Bearer \\${token}\\`,\n                'x-api-key': id\n            }\n        });\n\n        let data = await resp.json();\n        status = data.status;\n\n        // delay is a utility to 'pause' for X ms\n        if (status !== 'succeeded' && status !== 'failed') await delay(1000);\n        if (status === 'succeeded') return data;\n    }\n\n    return status;\n\n}\n`}</code></pre>\n    <p>{`While your job is still in progress, you get a result that looks like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{ \n    \"status\": \"running\", \n    \"jobId\": \"86ffe2ea-d765-4bd3-b2fd-568ca8fc36ac\"\n}\n`}</code></pre>\n    <p>{`After Firefly successfully generates your image, the final status looks similar to this response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n        \"status\": \"succeeded\",\n        \"jobId\": \"urn:ff:jobs:eso851211:86ffe2ea-d765-4bd3-b2fd-568ca8fc36ac\",\n        \"result\": {\n                \"size\": {\n                        \"width\": 2048,\n                        \"height\": 2048\n                },\n                \"outputs\": [\n                        {\n                                \"seed\": 2142812600,\n                                \"image\": {\n                                        \"url\": \"https://pre-signed-firefly-prod.s3-accelerate.amazonaws.com/images/0c5c80a3-7189-4bd3-a52e-87b36e4fc47b12345\"\n                                }\n                        }\n                ],\n                \"contentClass\": \"art\"\n        }\n}\n`}</code></pre>\n    <p>{`Altogether, here's a complete script that takes a static text prompt, creates a request to Firefly, and checks the status of this request. When Firefly generates the image, this script saves the result to the file system. As a reminder, any utility functions below such as the one handling authentication are the same as when you make synchronous calls, and your code could implement this authentication differently.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n\nlet FIREFLY_SERVICES_CLIENT_ID = process.env.FIREFLY_SERVICES_CLIENT_ID;\nlet FIREFLY_SERVICES_CLIENT_SECRET = process.env.FIREFLY_SERVICES_CLIENT_SECRET;\n\nlet BASE = 'https://firefly-api.adobe.io';\n\nasync function getAccessToken(id, secret) {\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,read_organizations,firefly_enterprise,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nasync function asyncTextToImage(prompt, contentClass='photo', id, token) {\n\n    let body = {\n        prompt, \n        contentClass\n    }\n\n    let resp = await fetch(\\`\\${BASE}/v3/images/generate-async\\`, {\n        method:'POST',\n        headers: {\n            'x-api-key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await resp.json();\n\n}\n\nasync function delay(x) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve();\n        }, x);\n    });\n}\n\nasync function pollJob(jobUrl, id, token) {\n    let status = '';\n\n    while(status !== 'succeeded' && status !== 'failed') {\n\n        let resp = await fetch(jobUrl, {\n            headers: {\n                'Authorization':\\`Bearer \\${token}\\`,\n                'x-api-key': id\n            }\n        });\n\n        let data = await resp.json();\n        console.log(data);\n        status = data.status;\n\n        if (status !== 'succeeded' && status !== 'failed') await delay(1000);\n        if (status === 'succeeded') return data;\n    }\n\n    return status;\n\n}\n\nasync function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n\nlet token = await getAccessToken(FIREFLY_SERVICES_CLIENT_ID, FIREFLY_SERVICES_CLIENT_SECRET);\n\nlet result = await asyncTextToImage('a cat living their best life, sleeping in a sunbeam', 'art', FIREFLY_SERVICES_CLIENT_ID, token);\nconsole.log(result);\n\nlet jobResult = await pollJob(result.statusUrl, FIREFLY_SERVICES_CLIENT_ID, token);\nconsole.log(JSON.stringify(jobResult, null, '\\\\t'));\n\nfor(let output of jobResult.result.outputs) {\n    let fileName = \\`./\\${output.seed}.jpg\\`;\n    await downloadFile(output.image.url, fileName);\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"expanding-images-with-async-apis\"\n    }}>{`Expanding Images with Async APIs`}</h2>\n    <p>{`The asynchronous API are even more powerful; in this next example, we take a source image, upload it, and then use the `}<a parentName=\"p\" {...{\n        \"href\": \"../api/generative_expand/V3_Async/\"\n      }}>{`Expand Image Asynchronous API`}</a>{` to resize it. Instead of doing one resize after another, we can kick off multiple jobs at once so we can resize an image much more efficiently.`}</p>\n    <p>{`First, let's look at our wrapper function which uses a small subset of available parameters. In this case, our wrapper only needs the source image and your desired size:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`async function asyncExpandImage(source, size, id, token) {\n\n    let [ width, height ] = size.split('x');\n\n    let body = {\n        image: {\n            source: {\n                uploadId: source\n            }\n        },\n        size: {\n            width, height\n        }\n    }\n\n    let resp = await fetch(\\`\\${BASE}/v3/images/expand-async\\`, {\n        method:'POST',\n        headers: {\n            'x-api-key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await resp.json();\n}\n`}</code></pre>\n    <p>{`Now let's look at the code that uses this. We begin by authenticating and uploading a source image:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let token = await getAccessToken(FIREFLY_SERVICES_CLIENT_ID, FIREFLY_SERVICES_CLIENT_SECRET);\n\nlet upload = await uploadImage('./source.jpg', 'image/jpeg', FIREFLY_SERVICES_CLIENT_ID, token);\nlet uploadedImage = upload.images[0].id;\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`uploadImage`}</inlineCode>{` wraps the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/firefly-services/docs/firefly-api/guides/api/upload_image/\"\n      }}><inlineCode parentName=\"a\">{`upload`}</inlineCode></a>{` method. Also note that as with the synchronous versions of the Firefly APIs, you can also work with signed URLs from our supported cloud storage providers.`}</p>\n    <p>{`Now, let's define a set of desired sizes, kick off the jobs, and wait for them to complete:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let sizes = ['2500x2500','3000x3000','3500x3500'];\n\nlet expandJobs = [];\nfor(let size of sizes) {\n    console.log(\\`Create job to expand our source to \\${size}\\`);\n    expandJobs.push(asyncExpandImage(uploadedImage, size, FIREFLY_SERVICES_CLIENT_ID, token));\n}\n\nlet jobs = await Promise.all(expandJobs);\n`}</code></pre>\n    <p>{`Typically you should have additional error checking in place. At this point, all three jobs for each of the three sizes have begun.`}</p>\n    <p>{`Next we set up our polling and wait for them to complete:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`let expandResults = [];\njobs.forEach(j => {\n    expandResults.push(pollJob(j.statusUrl, FIREFLY_SERVICES_CLIENT_ID, token));\n});\nconsole.log('Waiting for the jobs to complete...');\n\nlet finalResults = await Promise.all(expandResults);\n`}</code></pre>\n    <p>{`Once the jobs successfully complete, we download the results:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log('All work done, now downloading.');\n\nfinalResults.forEach((r,i) => {\n    // we know we only have one result\n    downloadFile(r.result.outputs[0].image.url, \\`source_\\${sizes[i]}.jpg\\`);\n});\n`}</code></pre>\n    <p>{`Here's the complete script for this example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import fs from 'fs';\nimport { Readable } from 'stream';\nimport { finished } from 'stream/promises';\n\nlet FIREFLY_SERVICES_CLIENT_ID = process.env.FIREFLY_SERVICES_CLIENT_ID;\nlet FIREFLY_SERVICES_CLIENT_SECRET = process.env.FIREFLY_SERVICES_CLIENT_SECRET;\n\nlet BASE = 'https://firefly-api.adobe.io';\n\nasync function getAccessToken(id, secret) {\n    const params = new URLSearchParams();\n\n    params.append('grant_type', 'client_credentials');\n    params.append('client_id', id);\n    params.append('client_secret', secret);\n    params.append('scope', 'openid,AdobeID,read_organizations,firefly_enterprise,firefly_api,ff_apis');\n    \n    let resp = await fetch('https://ims-na1.adobelogin.com/ims/token/v3', \n        { \n            method: 'POST', \n            body: params\n        }\n    );\n\n    let data = await resp.json();\n    return data.access_token;\n}\n\nasync function asyncExpandImage(source, size, id, token) {\n\n    let [ width, height ] = size.split('x');\n\n    let body = {\n        image: {\n            source: {\n                uploadId: source\n            }\n        },\n        size: {\n            width, height\n        }\n    }\n\n    let resp = await fetch(\\`\\${BASE}/v3/images/expand-async\\`, {\n        method:'POST',\n        headers: {\n            'x-api-key':id, \n            'Authorization':\\`Bearer \\${token}\\`,\n            'Content-Type':'application/json'\n        }, \n        body: JSON.stringify(body)\n    });\n\n    return await resp.json();\n}\n\nasync function delay(x) {\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve();\n        }, x);\n    });\n}\n\nasync function pollJob(jobUrl, id, token) {\n    let status = '';\n\n    while(status !== 'succeeded' && status !== 'failed') {\n\n        let resp = await fetch(jobUrl, {\n            headers: {\n                'Authorization':\\`Bearer \\${token}\\`,\n                'x-api-key': id\n            }\n        });\n\n        let data = await resp.json();\n        status = data.status;\n\n        if (status !== 'succeeded' && status !== 'failed') await delay(1000);\n        if (status === 'succeeded') return data;\n    }\n\n    // only returns for fails now, meh\n    return status;\n\n}\n\nasync function uploadImage(filePath, fileType, id, token) {\n\n    let stream = fs.createReadStream(filePath);\n    let stats = fs.statSync(filePath);\n    let fileSizeInBytes = stats.size;\n\n    let upload = await fetch(\\`\\${BASE}/v2/storage/image\\`, {\n        method:'POST', \n        headers: {\n            'Authorization':\\`Bearer \\${token}\\`, \n            'X-API-Key':id, \n            'Content-Type':fileType, \n            'Content-Length':fileSizeInBytes\n        }, \n        duplex:'half', \n        body:stream\n    });\n\n    return await upload.json();\n}\n\nasync function downloadFile(url, filePath) {\n    let res = await fetch(url);\n    const body = Readable.fromWeb(res.body);\n    const download_write_stream = fs.createWriteStream(filePath);\n    return await finished(body.pipe(download_write_stream));\n}\n\nlet token = await getAccessToken(FIREFLY_SERVICES_CLIENT_ID, FIREFLY_SERVICES_CLIENT_SECRET);\n\nlet upload = await uploadImage('./source.jpg', 'image/jpeg', FIREFLY_SERVICES_CLIENT_ID, token);\nlet uploadedImage = upload.images[0].id;\n\nlet sizes = ['2500x2500','3000x3000','3500x3500'];\n\nlet expandJobs = [];\nfor(let size of sizes) {\n    console.log(\\`Create job to expand our source to \\${size}\\`);\n    expandJobs.push(asyncExpandImage(uploadedImage, size, FIREFLY_SERVICES_CLIENT_ID, token));\n}\n\nlet jobs = await Promise.all(expandJobs);\n\nlet expandResults = [];\njobs.forEach(j => {\n    expandResults.push(pollJob(j.statusUrl, FIREFLY_SERVICES_CLIENT_ID, token));\n});\nconsole.log('Waiting for the jobs to complete...');\n\nlet finalResults = await Promise.all(expandResults);\nconsole.log('All work done, now downloading.');\n\nfinalResults.forEach((r,i) => {\n    // we know we only have one result\n    downloadFile(r.result.outputs[0].image.url, \\`source_\\${sizes[i]}.jpg\\`);\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}