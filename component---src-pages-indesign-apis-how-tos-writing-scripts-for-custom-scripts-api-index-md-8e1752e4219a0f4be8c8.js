"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2457],{25777:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return o},default:function(){return c}});var n=a(58168),r=a(80045),d=(a(88763),a(15680)),i=a(83407);const s=["components"],o={},l=(m="InlineAlert",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)});var m;const p={_frontmatter:o},u=i.A;function c(e){let{components:t}=e,a=(0,r.A)(e,s);return(0,d.mdx)(u,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"writing-scripts-for-the-custom-scripts-api"},"Writing Scripts for the Custom Scripts API"),(0,d.mdx)("p",null,"Use this document to construct the script files for the Custom Scripts API."),(0,d.mdx)("p",null,"The script's author defines the custom attributes and values for a particular endpoint using ",(0,d.mdx)("em",{parentName:"p"},"script.js")," files in the custom script bundle",(0,d.mdx)("a",{parentName:"p",href:"../../concepts/index.md#Custom-Script-bundle-structure"},"1"),". Refer to the examples below to construct your scripts."),(0,d.mdx)("h2",{id:"including-input-in-a-custom-script"},"Including input in a custom script"),(0,d.mdx)("h3",{id:"when-no-input-is-required"},"When no input is required"),(0,d.mdx)("p",null,"The system, by default, sends a string-type argument named ",(0,d.mdx)("inlineCode",{parentName:"p"},'"params"'),", which needs to be parsed inside the script to retrieve the values of the attributes."),(0,d.mdx)("p",null,"In this case the ",(0,d.mdx)("inlineCode",{parentName:"p"},'"params"')," attribute will be empty, since the script doesn't need an argument."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "assets": [\n        {"path": "doc.indd"},\n        {"path": "image.pdf"},\n        ...\n    ],\n    "params": {\n\n    },\n    "jobID": "0c531425-bc82-43c0-89b7-0e851cd56061",\n    "workingFolder": <Some path>\n}\n')),(0,d.mdx)("h3",{id:"when-input-is-included-in-the-request"},"When input is included in the request"),(0,d.mdx)("p",null,"The system, by default, sends a string-type argument named ",(0,d.mdx)("inlineCode",{parentName:"p"},'"params"')," which also includes input arguments ",(0,d.mdx)("inlineCode",{parentName:"p"},'"arg1"')," and ",(0,d.mdx)("inlineCode",{parentName:"p"},'"arg2"'),"."),(0,d.mdx)("p",null,"To use the argument, ",(0,d.mdx)("inlineCode",{parentName:"p"},'"params"')," must be parsed by the script and the value of ",(0,d.mdx)("inlineCode",{parentName:"p"},"arg1")," and ",(0,d.mdx)("inlineCode",{parentName:"p"},"arg2")," must be extracted."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "assets": [\n        {"path":"doc.indd"},\n        {"path":"image.pdf"},\n        ...\n    ],\n    "params": {\n        "arg1": <data for argument 1>,\n        "arg2": <data for argument 2>,\n        ...\n    },\n    "jobID": "0c531425-bc82-43c0-89b7-0e851cd56061",\n    "workingFolder": <Some path>\n}\n')),(0,d.mdx)("p",null,"The existing scripts must be tweaked to accept the arguments correctly:"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Previous existing script")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"var arg1 = app.scriptArgs.get('argument1')\nvar arg2 = app.scriptArgs.get('argument2')\n// Some processing\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"New correct script"),"  "),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"var parameters = app.scriptArgs.get('parameters')\nvar arg1 = parameters['argument1']\nvar arg2 = parameters['argument2']\n// Some processing\n")),(0,d.mdx)("h3",{id:"input-examples"},"Input examples"),(0,d.mdx)("p",null,"For example, below is a sample input and sample script code to open a document and close a document:"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example input request body")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "assets": [\n        {\n            "source": {\n                "storageType": "Azure",\n                "url": "<Pre-signed URL of the document>"\n            },\n            "destination": "doc.indd"\n        }\n    ],\n    "params": {\n        "targetDocument": "doc.indd"\n    }\n}\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Transformed input request sent to the script")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "assets": [\n        {\n            "path": "doc.indd"\n        }\n    ],\n    "params": {\n        "targetDocument": "doc.indd"\n    },\n    "jobID": "0c531425-bc82-43c0-89b7-0e851cd56061",\n    "workingFolder": "c:\\\\baseFolder\\\\assets"\n}\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Sample code that takes the input (from above)")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},'  \n    var input = app.scriptArgs.get(\'parameters\')\n    var allParameters = JSON.parse(input)\n\n    // Set the working folder, which manages all the input and output assets.\n    var basePath = allParameters["workingFolder"]\n\n    var documentToOpen = allParameters["params"]["targetDocument"]\n\n    documentPath = basePath + "\\\\" + documentToOpen\n    document = app.open(File(documentPath))\n    document.close()\n')),(0,d.mdx)("h2",{id:"providing-output-from-a-custom-script"},"Providing output from a custom script"),(0,d.mdx)("p",null,"Use the information below to output data, files, or logs correctly from a script."),(0,d.mdx)("h3",{id:"if-an-execution-is-successful"},"If an execution is successful"),(0,d.mdx)("p",null,"The attributes below are expected to be returned as a JSON string if the script execution is successful."),(0,d.mdx)(l,{variant:"warning",slots:"title, text",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Caution:")),(0,d.mdx)("p",null,"Anything outside of these attributes might be logged as data to be investigated."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"),(0,d.mdx)("th",{parentName:"tr",align:null},"Required"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"dataURL")),(0,d.mdx)("td",{parentName:"tr",align:null},"A relative path to the JSON data file inside the working folder. When there is no data to send, pass an empty string."),(0,d.mdx)("td",{parentName:"tr",align:null},"X")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"status")),(0,d.mdx)("td",{parentName:"tr",align:null},"Status of the execution. Can be ",(0,d.mdx)("inlineCode",{parentName:"td"},"SUCCESS")," or ",(0,d.mdx)("inlineCode",{parentName:"td"},"FAILURE"),"."),(0,d.mdx)("td",{parentName:"tr",align:null},"X")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"assetToBeUploaded")),(0,d.mdx)("td",{parentName:"tr",align:null},"An array for assets that need to be uploaded. Each asset is an object with a ",(0,d.mdx)("inlineCode",{parentName:"td"},"path")," and ",(0,d.mdx)("inlineCode",{parentName:"td"},"data")," attribute. The ",(0,d.mdx)("inlineCode",{parentName:"td"},"path")," is a relative link for the file to be uploaded. The ",(0,d.mdx)("inlineCode",{parentName:"td"},"data")," is the data in dictionary (object) format to be associated with this asset. This can be empty."),(0,d.mdx)("td",{parentName:"tr",align:null},"X")))),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "status": "SUCCESS",\n    "assetToBeUploaded": [\n        {\n            "path": <Relative path of the file to be uploaded>,\n            "data": <Data associated with this asset>\n        }\n    ],\n    "dataURL": <Relative path of the JSON data file>\n}\n')),(0,d.mdx)("h3",{id:"output-examples"},"Output examples"),(0,d.mdx)("p",null,"In these examples the data is shared in a JSON file, not directly. This is ideal for cases where the data becomes too big to send back."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example without data and without any output file")),(0,d.mdx)("p",null,"This creates an object to be returned when the job is successful. The object should be stringified before returning."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"\nfunction GetSuccessReturnObj() {\n    var obj = {}\n    \n    obj.status = 'SUCCESS'\n    obj.assetsToBeUploaded = []\n    obj.dataURL = ''\n    \n    return JSON.stringify(obj)\n\n}\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example with data and without any output file")),(0,d.mdx)("p",null,"  This creates an object to be returned when the job is successful. Data is written into a JSON file, which should be created in a working folder."),(0,d.mdx)("p",null,"  The data in dictionary (object) format is to be returned. The object should be stringified before returning."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"function GetSuccessReturnObj(data) {\n  var obj = {}\n  \n  obj.status = 'SUCCESS'\n  obj.assetsToBeUploaded = []\n  obj.dataURL = WriteToFile(data)\n  \n  return JSON.stringify(obj)\n}\nfunction WriteToFile ( data ) {\n  var newFile\n  var fileName = 'data.json'\n  var filePath = workingFolder + '\\\\' + fileName\n  newFile = File(filePath)\n  newFile.encoding = 'UTF8'\n  newFile.open('write')\n  newFile.write(JSON.stringify(data))\n  newFile.close()\n  return filePath  \n}\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example with data and with the output file")),(0,d.mdx)("p",null,"  This creates an array of assets to be uploaded and sent back to the caller."),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("p",{parentName:"li"},(0,d.mdx)("inlineCode",{parentName:"p"},"assetPath"),": The path of the file to be uploaded, relative to the working folder.")),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("p",{parentName:"li"},(0,d.mdx)("inlineCode",{parentName:"p"},"data"),": The data in dictionary (object) format to be associated with this asset. (It's optional)."),(0,d.mdx)("p",{parentName:"li"},"This data will be provided to the user with an  ",(0,d.mdx)("inlineCode",{parentName:"p"},"ASSET_UPLOAD_COMPLETED"),"  event."))),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"\n  var assets = []\n  var assetToBeUploaded = {}\n  \n  assetToBeUploaded.path = assetPath\n  assetToBeUploaded.data = data //this is optional\n  assets.push(assetToBeUploaded)\n  \n  \n  function GetSuccessReturnObj(assets, data) {\n    var obj = {}\n    obj.status = 'SUCCESS'\n    obj.assetsToBeUploaded = assets\n    if (data) {\n        obj.dataURL = WriteToFile(data)\n    } else {\n        obj.dataURL = ''\n    }\n    return JSON.stringify(obj)\n}\n")),(0,d.mdx)("h3",{id:"if-an-execution-fails"},"If an execution fails"),(0,d.mdx)("p",null,"When a script execution fails, the following attributes are returned as a JSON string."),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Attribute"),(0,d.mdx)("th",{parentName:"tr",align:null},"Output Request Mapping"),(0,d.mdx)("th",{parentName:"tr",align:null},"Required"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"status")),(0,d.mdx)("td",{parentName:"tr",align:null},"Status of execution. Will be ",(0,d.mdx)("inlineCode",{parentName:"td"},"SUCCESS")," or ",(0,d.mdx)("inlineCode",{parentName:"td"},"FAILURE"),"."),(0,d.mdx)("td",{parentName:"tr",align:null},"X")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"errorCode")),(0,d.mdx)("td",{parentName:"tr",align:null},"The error code."),(0,d.mdx)("td",{parentName:"tr",align:null})),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"errorString")),(0,d.mdx)("td",{parentName:"tr",align:null},"A description of the error."),(0,d.mdx)("td",{parentName:"tr",align:null})))),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "status": "FAILURE",\n    "errorCode": <Error code>,\n    "errorString": <Error Message>,\n}\n')),(0,d.mdx)("p",null,"Use the code block below as a starting point to create the returned object for failed cases."),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"errorCode"),": Error code detail."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"errorString"),": Description about the error.")),(0,d.mdx)("p",null,"Returns the object as a JSON string."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-javascript"},"function GetFailureReturnObj(errorCode, errorString) {\n    var obj = {}\n    obj.status = 'FAILURE'\n    obj.errorCode = errorCode\n    obj.errorString = errorString\n    return JSON.stringify(obj)\n}\n")),(0,d.mdx)("h2",{id:"sample-scripts"},"Sample Scripts"),(0,d.mdx)("p",null,"To help you get started with writing custom scripts for the Custom Scripts API, we have created a collection of sample scripts. These scripts demonstrate various use cases and best practices for constructing custom script bundles and handling input/output in your scripts. The repository includes scripts in both Extendscript and UXP formats."),(0,d.mdx)("p",null,"You can find the sample scripts on our GitHub repository: ",(0,d.mdx)("a",{parentName:"p",href:"https://github.com/AdobeDocs/indesign-api-docs/tree/main/SampleScripts"},"Sample Scripts for Custom Scripts API"),"."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-indesign-apis-how-tos-writing-scripts-for-custom-scripts-api-index-md-8e1752e4219a0f4be8c8.js.map